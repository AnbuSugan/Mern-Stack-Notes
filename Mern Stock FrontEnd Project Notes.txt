Frontend Setup

Creating React Project
Installing NPM Packages
Creating Layouts & Components
Using React Router

step:
command : npx create-react-app .
          npm start
          
install commands:     
npm i axios
npm i react-helmet-async
npm i @reduxjs/toolkit
npm i react-redux
npm i redux-thunk
npm i react-router-dom 
npm i @redux-devtools/extension
 npm i react-bootstrap@1.x


///App.js
html,
body {
  font-family: 'Amazon Ember';
  width: 100%;
  height: 100%;
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
}


/* Scroll Bar */

::-webkit-scrollbar-track {
  background-color: #f5f5f5;
}

::-webkit-scrollbar {
  width: 8px;
  background-color: #f5f5f5;
}

::-webkit-scrollbar-thumb {
  background-color: rgba(66, 66, 66, 0.2);
  border: 0px;
  background-clip: padding-box;
  border-radius: 5px;
}

nav {
  background-color: #232f3e;
  padding: 1rem 1rem;
}


#search_btn {
  background-color: #febd69;
}

.input-group {
  width: 90%;
  margin-right: 35%;
}

#search_field {
  height: 2.4rem;
  padding: 1rem;
}

#login_btn,
#view_btn {
  background-color: #febd69;
  padding: 0.4rem 1.8rem;
  font-family: calibri;
}

#cart {
  font-size: 1rem;
  color: white;
}

#cart_count {
  background-color: #febd69;
  padding: 0.2rem 0.5rem;
  border-radius: 0.2rem;
  color: black;
  font-weight: bold;
  font-size: 0.9rem;
}

/* Home page */
#products_heading {
  margin-top: 1.8rem;
}

.card {
  height: 100%;
}

.card-title a {
  color: #2e2e2e;
}

.card-title a:hover {
  color: #fa9c23;
  text-decoration: none;
}

.card-body {
  padding-left: 0;
}

.card-text {
  font-size: 1.4rem;
}

#view_btn {
  background-color: #fa9c23;
  color: white;
}

.card-img-top {
  width: 200px;
  height: 150px;
}

.ratings {
  font-size: 1.2rem;
  color: #fdcc0d;
}

#no_of_reviews {
  font-size: 0.85rem;
  color: grey;
  margin-left: 0.5rem;
}

/* Footer */
footer {
  margin-top: 8rem;
  color: grey;
  bottom: 0;
  width: 100%;
}

/* Ratings */

.rating-outer {
  display: inline-block;
  position: relative;
  font-family: FontAwesome;
  color: #fdcc0d;
}

.rating-outer::before {
  content: '\f006 \f006 \f006 \f006 \f006';
}

.rating-inner {
  position: absolute;
  top: 0;
  left: 0;
  white-space: nowrap;
  overflow: hidden;
  width: 0;
}

.rating-inner::before {
  content: '\f005 \f005 \f005 \f005 \f005';
  color: #f8ce0b;
}

/* Product Details Page */
#product_id {
  color: grey;
  font-size: 0.8rem;
}

#product_price {
  font-size: 2rem;
  font-weight: bold;
}

#cart_btn,
#review_btn {
  border-radius: 2rem;
  background-color: #fa9c23;
  border: none;
  padding: 0.5rem 2rem;
}

#product_seller {
  color: grey;
  font-size: 0.9rem;
}

#stock_status {
  font-size: 1.1rem;
  font-weight: bold;
  margin-left: 0.3rem;
}

.redColor {
  color: red;
}

.greenColor {
  color: green;
}

#product_image {
  margin-top: 9rem;
}

/* Loader */
.loader {
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top: 20%;
  width: 80px;
  height: 80px;
  padding-left: 0;
}
.loader:after {
  content: ' ';
  display: block;
  width: 64px;
  height: 64px;
  margin: 8px;
  border-radius: 50%;
  border: 6px solid #fa9c23;
  border-color: #fa9c23 transparent;
  animation: lds-dual-ring 1.2s linear infinite;
}
@keyframes lds-dual-ring {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Cart */

.cart-item {
  margin: 1.8rem 0rem;
  padding: 0rem 0.7rem;
}

.cart-item a {
  color: grey;
}

#delete_cart_item {
  color: red;
  background: white;
  padding: 0.3rem 0.5rem;
  font-size: 1.1rem;
  border: none;
}

#card_item_price {
  color: #febd69;
  font-weight: bold;
  font-size: 1.4rem;
}

#checkout_btn,
.review-btn {
  background-color: #fa9c23;
  border-color: #fa9c23;
  margin-top: 2rem;
  border-radius: 5rem;
}

#view_order_details {
  background-color: #fa9c23;
  border-color: #fa9c23;
}

#order_summary {
  border: 1px solid #e3e3e3;
  border-radius: 1rem;
  padding: 2rem 1.5rem;
}

.order-summary-values {
  float: right;
  font-weight: bold;
}

.stockCounter input {
  border: none;
  width: 3rem;
  text-align: center;
}

.plus,
.minus {
  padding: 0.1rem 0.5rem;
}

.stockCounter input::-webkit-outer-spin-button,
.stockCounter input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.form-control:disabled,
.form-control[readonly] {
  background-color: white;
}

/* Login & Register */

.wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 5rem;

  font-weight: 700;
}

.wrapper form {
  padding: 2.5rem 3rem;
}

.wrapper form .btn {
  background-color: #fa9c23;
  border-color: #fa9c23;
  color: white;
  margin-top: 2.5rem;
}

.wrapper form a {
  font-size: 0.9rem;
  color: grey;
}

/* Avatar */
.avatar {
  display: inline-block;
  margin-bottom: 0;
  height: 3rem;
  width: 3rem;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  border-radius: 50%;
}

.avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.rounded-circle {
  border-radius: 50% !important;
}

.btn.focus,
.btn:focus {
  outline: 0;
  box-shadow: none;
}

/* Header User Profile */

.avatar-nav {
  margin-right: 0.6rem;
  height: 2.2rem;
  width: 2.2rem;
}

/* Checkout Steps */

.checkout-progress div {
  box-sizing: border-box;
}

.checkout-progress {
  display: block;
  clear: both;
  margin: 20px auto;
  width: auto;
  font-family: sans-serif;
  overflow: auto;
}

.step {
  margin: 0;
  border: 0;
  letter-spacing: 1px;
  line-height: 30px;
  padding: 5px 10px 5px 15px;
  color: grey;
  text-decoration: none;
  cursor: default;
  font-weight: bold;
  float: left;
  height: auto;
}

.incomplete {
  background: #eeeeee;
}

.active-step {
  background: #fa9c23;
  color: #fff;
}

.triangle-active {
  float: left;
  width: 0;
  border-top: 20px solid transparent;
  border-left: 15px solid #fa9c23;
  border-bottom: 20px solid transparent;
  margin-left: -1px;
}

.triangle2-active {
  width: 0;
  float: left;
  border-top: 20px solid #fa9c23;
  border-left: 15px solid #fff;
  border-bottom: 20px solid #fa9c23;
  margin-right: -1px;
}

.triangle-incomplete {
  float: left;
  width: 0;
  border-top: 20px solid transparent;
  border-left: 15px solid #eeeeee;
  border-bottom: 20px solid transparent;
  margin-left: -1px;
}

.triangle2-incomplete {
  width: 0;
  float: left;
  border-top: 20px solid #eeeeee;
  border-left: 15px solid #fff;
  border-bottom: 20px solid #eeeeee;
  margin-right: -1px;
}

/* User Profile */

.avatar-profile {
  height: 16rem;
  width: 16rem;
}

.user-info h4 {
  font-weight: 800;
  color: grey;
  margin-top: 2rem;
}

.user-info p {
  font-size: 1.1rem;
}

#edit_profile {
  background-color: #fa9c23;
  border-color: #fa9c23;
}

/* Confirm Order */

.order-confirm p,
.order-details p {
  margin-left: 1.5rem;
}

.update-btn {
  background-color: #fa9c23;
  border-color: #fa9c23;
  color: white;
}

.update-btn:hover {
  color: white;
}

/* Pagination */
.page-item.active .page-link {
  background-color: #fa9c23;
  border-color: #fa9c23;
}

.page-link {
  color: #fa9c23;
}

.page-link:hover {
  color: #fa9c23;
}

/* Admin Sidebar */

.sidebar-wrapper {
  display: flex;
  width: 100%;
  align-items: stretch;
  min-height: 100vh;
  font-weight: normal;

  margin-top: 0;
  height: 100%;
  left: 0;
  top: 0;
  z-index: 10;
}
#sidebar {
  min-width: 100%;
  max-width: 100%;
  background: #232f3e;
  color: #fff;
  transition: all 0.3s;
}
#sidebar.active {
  margin-left: -250px;
}

#sidebar .sidebar-header {
  padding: 20px;
  background: #232f3e;
}
#sidebar ul.components {
  padding: 5px 0px;
  border-bottom: 1px solid #232f3e;
}

#sidebar ul li a {
  padding: 10px;
  font-size: 1.1em;
  display: block;
  color: white;
  text-decoration: none;
}
#sidebar ul li a:hover {
  color: #232f3e;
  background: #fff;
}

#sidebar ul li a i {
  margin-right: 0.3rem;
}

#sidebar ul li.active > a,
a[aria-expanded='true'] {
  color: #fff;
  background: #232f3e;
}
a[data-toggle='collapse'] {
  position: relative;
}
.dropdown-toggle::after {
  display: block;
  position: absolute;
  top: 50%;
  right: 20px;
  transform: translateY(-50%);
}

ul ul a {
  font-size: 1rem !important;
  padding-left: 30px !important;
  background: #232f3e;
}

ul.CTAs {
  padding: 20px;
}

ul.CTAs a {
  text-align: center;
  font-size: 0.9em !important;
  display: block;
  border-radius: 5px;
  margin-bottom: 5px;
}

/* Products List Admin */
#products_table .btn {
  padding: 0.2rem 0.5rem;
  margin-left: 0.4rem;
}

/* Dashboard */

.card-font-size {
  font-size: 1.5rem;
}

/* Reviews */

.rating {
  margin-top: 10rem;
}

.stars {
  height: 100px;
  display: flex;
  align-items: center;
  padding-left: 0;
}

.star {
  display: inline;
  list-style: none;
  font-size: 3rem;
  padding-left: 0.9rem;
  color: #e3e3e3;
}

.star:first-child {
  padding-left: 0;
}

.orange {
  color: #fa9c23;
}

.yellow {
  color: #fdcc0d;
}

.review_user {
  font-size: 0.8rem;
  color: grey;
}


Jvl Code Template file ahh clone eduthukanum
 Athula irukira Style.css ahh copy panni App.css la Pottukanum
apram Public Folder la irukira 
index.html ahh kila irukira link ahh coppy pannikanum react app ku mela

<link
      rel="stylesheet"
      type="text/css"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      type="text/css"
      href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <link
      href="https://fonts.cdnfonts.com/css/amazon-ember"
      rel="stylesheet"
      type="text/css"
    />

Custom Title Using React Helmet Async


step 1:
//components/layouts/Header.js
import React from 'react';

 const Header = () => {
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <img width="45px" src="./images/logo.png" alt='Loading'/> 
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
        <div className="input-group">
          <input
            type="text"
            id="search_field"
            className="form-control"
            placeholder="Enter Product Name ..."
          />
          <div className="input-group-append">
            <button id="search_btn" className="btn">
              <i className="fa fa-search" aria-hidden="true"></i>
            </button>
          </div>
        </div>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        <button className="btn" id="login_btn">Login</button>

        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header

step 2:
//components/layouts/Footer.js
import React from 'react'

const Footer = () => {
  return (
    <footer class="py-1">
    <p class="text-center text-dark mt-1">
      Shoppy - 2023-2024, All Rights Reserved
    </p>
  </footer>
  )
}

export default Footer

step 4:
MetaData.js used to change the browser title based on page
//components/layouts/MetaData.js
import React from 'react';
import { Helmet } from 'react-helmet-async';

function MetaData({ title }) {
  return (
    <Helmet>
      <title>{`${title}-Shoppy`}</title>
    </Helmet>
  );
}

export default MetaData;

step 4:
//components/Home.js
import React from 'react'
import MetaData from './layouts/MetaData'

function Home() {
  return (
    <>
 <MetaData title={'Buy Best Products'} />
    <h1 id="products_heading">Latest Products</h1>
    <section id="products" className="container mt-5">
    <div className="row">
      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/1.jpg" 
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">OPPO F21s Pro 5G (Dawnlight Gold, 8GB RAM, 128 Storage) with No Cost EMI/Additional Exchange Offers</a>
            </h5>
            <div className="ratings mt-auto">
              <div className="rating-outer">
                <div className="rating-inner"></div>
              </div>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$245.67</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/2.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href=""
                >WRISTIO HD, Bluetooth Calling Smart Watch, 15 days battery life, Water Resistant</a
              >
            </h5>
            <div className="ratings mt-auto">
             <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$150.32</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/3.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href=""
                >Dell Inspiron 3511 Laptop, Intel i3-1115G4, 8GB, 512GB</a
              >
            </h5>
            <div className="ratings mt-auto">
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$440.57</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/4.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">PTron Newly Launched Tangent Sports, 60Hrs Playtime</a>
            </h5>
            <div className="ratings mt-auto">
             <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$15.46</p>

            <a type="button" href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/5.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">Campus Men's Maxico Running Shoes</a>
            </h5>
            <div className="ratings mt-auto">
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$10.12</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>
    </div>
  </section>
  </>
  )
}

export default Home



steps
////Using Redux
Product Listing with State
Product Details with State
Show Loading 
Error Alert



///Redux Setup

step 1:
//src/store.js
import {combineReducers, configureStore} from "@reduxjs/toolkit";
import {thunk} from "redux-thunk";


const reducer = combineReducers({

}) 


const store = configureStore({ 
    reducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
    // middleware:[thunk]
})

export default store;

step 2:
//index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import store from './store';
import { Provider } from 'react-redux';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
    <App />
    </Provider>
  </React.StrictMode>
);



steps:
//Create Products Reducer

step 1:

//src/slices/productsSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productsSlice = createSlice({
    name: 'products',
    initialState:{
        loading: false
    },
    reducers:{
        productsRequest(state,action){
            return {
                loading: true
            }
        },
        productsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products
            }
        },
        productsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= productsSlice;

export const {productsRequest,productsSuccess,productsFail} = actions;

export default reducer;


step 2:
//src/store.js
import {combineReducers, configureStore} from "@reduxjs/toolkit";
import {thunk} from "redux-thunk";
import productsReducer from "./slices/productsSlice"


const reducer = combineReducers({
   1.    productsState: productsReducer 
}) 


const store = configureStore({ 
    reducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
    // middleware:[thunk]
})

export default store;


steps:
//Creating Products Actions
step 1:
//src/actions/productActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = async (dispatch) =>{

    try{
        dispatch(productsRequest())
        const {data} = await axios.get('/api/v1/products');
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}

//Product Listing with Redux State

step:1

//src/components/Home.js
import React, { useEffect } from 'react'
import MetaData from './layouts/MetaData'
import { getProducts } from '../actions/productsActions'
import {useDispatch} from "react-redux" 

function Home() {
1.   const dispatch = useDispatch();
  useEffect(()=>{
        dispatch(getProducts)
  },[]) 
  
  return (

    <>
 <MetaData title={'Buy Best Products'} />
    <h1 id="products_heading">Latest Products</h1>
    <section id="products" className="container mt-5">
    <div className="row">
      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/1.jpg" 
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">OPPO F21s Pro 5G (Dawnlight Gold, 8GB RAM, 128 Storage) with No Cost EMI/Additional Exchange Offers</a>
            </h5>
            <div className="ratings mt-auto">
              <div className="rating-outer">
                <div className="rating-inner"></div>
              </div>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$245.67</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/2.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href=""
                >WRISTIO HD, Bluetooth Calling Smart Watch, 15 days battery life, Water Resistant</a
              >
            </h5>
            <div className="ratings mt-auto">
             <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$150.32</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/3.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href=""
                >Dell Inspiron 3511 Laptop, Intel i3-1115G4, 8GB, 512GB</a
              >
            </h5>
            <div className="ratings mt-auto">
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$440.57</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/4.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">PTron Newly Launched Tangent Sports, 60Hrs Playtime</a>
            </h5>
            <div className="ratings mt-auto">
             <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$15.46</p>

            <a type="button" href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

      <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src="./images/products/5.jpg"
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">Campus Men's Maxico Running Shoes</a>
            </h5>
            <div className="ratings mt-auto">
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half-o"></i>
              <i className="fa fa-star-o"></i>
              <span id="no_of_reviews">(5 Reviews)</span>
            </div>
            <p className="card-text">$10.12</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>
    </div>
  </section>
  </>
  )
}

export default Home

step:2
frontend Package.json
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@redux-devtools/extension": "^3.3.0",
    "@reduxjs/toolkit": "^2.2.1",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.7",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.1",
    "react-dom": "^18.2.0",
    "react-helmet-async": "^2.0.4",
    "react-redux": "^9.1.0",
    "react-router-dom": "^6.22.1",
    "react-scripts": "5.0.1",
    "redux-thunk": "^3.1.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
1.  "proxy":"http://127.0.0.1:8000"(frontend and backend localhost connection)
 
} 

frontend stop pannitu thirumba run pannanum

browserla poi inspect panni network and redux tool kitla response vanthiruchanu parkanum
athuku munnadi backend la irukira get product routes la authentication user eduthu vitrom and prductcontroller.js la resperpage 3 mathitu check panrom


///State la irukira datava eduthu List Panna Porom

via Home.js
Step 1:
//src/components/Home.js
import React, { useEffect } from 'react'
import MetaData from './layouts/MetaData'
import { getProducts } from '../actions/productsActions'
import {useDispatch, useSelector} from "react-redux" 

function Home() {
   const dispatch = useDispatch();
  const {products,loading}= useSelector((state) => state.productsState)
  useEffect(()=>{
        dispatch(getProducts)
  },[]) 
  
  return (

    <>
 <MetaData title={'Buy Best Products'} />
    <h1 id="products_heading">Latest Products</h1>
    <section id="products" className="container mt-5">
    <div className="row">
      {products && products.map(product =>(
        <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src={product.images[0].image}
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">{product.name}</a>
            </h5>
            <div className="ratings mt-auto">
              <div className="rating-outer">
                <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
              </div>
              <span id="no_of_reviews">({product.numOfRevies} Reviews)</span>
            </div>
            <p className="card-text">${product.price}</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div>

     
      

      ))}
        </div>

step 2:
Backend Seeder file la correct ana image path kuduthu thiruma npm run seeder.js file run pannuvom
seeder.js
[
    {
        "name": "OPPO F21s Pro 5G",
        "price": 245.67,
        "description": "OPPO F21s Pro 5G is a powerful device with a RAM extension feature, that offers brilliant operational speed to users.",
        "ratings": 4.5,
        "images": [
            {
                "image": "/images/products/1.jpg"
            }, 
            {
                "image": "/images/products/2.jpg"
            }  
        ],
        "category": "Mobile Phones",
        "seller": "Amazon",
        "stock": 5,
        "numOfReviews": 15,
        "reviews": []
    },
    {
        "name": "WRISTIO HD, Bluetooth Calling Smart Watch",
        "price": 150.32,
        "description": "Minix watches are exclusively designed to fulfill the advanced tech needs of today’s generation.",
        "ratings": 3.5,
        "images": [
            {
                "image": "/images/products/2.jpg"
            }
        ],
        "category": "Accessories",
        "seller": "Flipkart",
        "stock": 9,
        "numOfReviews": 5,
        "reviews": []
    },
    {
        "name": "Dell Inspiron 3511 Laptop",
        "price": 440.57,
        "description": "Dell Inspiron 3511 11th Generation Intel Core i5-1135G7 Processor (8MB Cache, up to 4.2 GHz);Operating System: Windows 10 Home Single Language, English",
        "ratings": 2,
        "images": [
            {
                "image": "/images/products/3.jpg"
            }
        ],
        "category": "Laptops",
        "seller": "Ebay",
        "stock": 9,
        "numOfReviews": 12,
        "reviews": []
    },
    {
        "name": "Lenovo IdeaPad Slim 3 Laptop",
        "price": 250.45,
        "description": "Lenovo IdeaPad Slim 311th Gen Intel Core i5-1135G7 | Speed: 2.4 GHz (Base) - 4.2 GHz (Max) | 4 Cores | 8 Threads | 8 MB Cache",
        "ratings": 4,
        "images": [
          {
            "image": "/images/products/4.jpg"
          }
        ],
        "category": "Laptops",
        "seller": "Ebay",
        "stock": 9,
        "numOfReviews": 12,
        "reviews": []
      },
      {
        "name": "ASUS VivoBook 15 Laptop",
        "price": 767.32,
        "description": "ASUS VivoBook 15 15.6-inch (39.62 cm) HD, Dual Core Intel Celeron N4020, Thin and Light Laptop (4GB RAM/256GB SSD/Integrated Graphics/Windows 11 Home/Transparent Silver/1.8 Kg), X515MA-BR011W",
        "ratings": 5,
        "images": [
          {
            "image": "/images/products/5.jpg"
          }
        ],
        "category": "Laptops",
        "seller": "Ebay",
        "stock": 9,
        "numOfReviews": 12,
        "reviews": []
    },
    {
        "name": "PTron Newly Launched Tangent Sports, 60Hrs Playtime",
        "price": 15.46,
        "description": "Gigantic 60 + Hours of music playtime on a single charge; BT5.2 Wireless headphones with ENC (Environmental Noise Cancellation) Technology to enhance your voice quality over the voice calls",
        "ratings": 5,
        "images": [
            {
                "image": "/images/products/3.jpg"
            }
        ],
        "category": "Headphones",
        "seller": "Amazon",
        "stock": 4,
        "numOfReviews": 20,
        "reviews": []
    },
    {
        "name": "Campus Men's Maxico Running Shoes",
        "price": 10.12,
        "description": "The high raised back cover with extra padding.",
        "ratings": 3,
        "images": [
            {
                "image": "/images/products/4.jpg"
            }
        ],
        "category": "Sports",
        "seller": "Ebay",
        "stock": 6,
        "numOfReviews": 9,
        "reviews": []
    }
]

//Loader Spinner

step 1:
//components/layouts/Loader.js
export default function Loader() {
    return (
        <div className="loader"></div>
    )
}
step 2:
//App.css
/* Loader */
.loader {
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top: 20%;
  width: 80px;
  height: 80px;
  padding-left: 0;
}
.loader:after {
  content: ' ';
  display: block;
  width: 64px;
  height: 64px;
  margin: 8px;
  border-radius: 50%;
  border: 6px solid #fa9c23;
  border-color: #fa9c23 transparent;
  animation: lds-dual-ring 1.2s linear infinite;
}
@keyframes lds-dual-ring {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

Step 3:
//src/components/Home.js
import React, { useEffect } from 'react'
import MetaData from './layouts/MetaData'
import { getProducts } from '../actions/productsActions'
import {useDispatch, useSelector} from "react-redux" 
import Loader from './layouts/Loader'


function Home() {
   const dispatch = useDispatch();
  const {products,loading}= useSelector((state) => state.productsState)
  useEffect(()=>{
        dispatch(getProducts)
  },[]) 
  
  return (
<>
1.{loading ? <Loader/>:
    <>
    
 <MetaData title={'Buy Best Products'} />
    <h1 id="products_heading">Latest Products</h1>
    <section id="products" className="container mt-5">
    <div className="row">
      {products && products.map(product =>(
        <div className="col-sm-12 col-md-6 col-lg-3 my-3">
        <div className="card p-3 rounded">
          <img
            className="card-img-top mx-auto"
            src={product.images[0].image}
            alt='Loading'
          />
          <div className="card-body d-flex flex-column">
            <h5 className="card-title">
              <a href="">{product.name}</a>
            </h5>
            <div className="ratings mt-auto">
              <div className="rating-outer">
                <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
              </div>
              <span id="no_of_reviews">({product.numOfRevies} Reviews)</span>
            </div>
            <p className="card-text">${product.price}</p>
            <a href="#" id="view_btn" className="btn btn-block">View Details</a>
          </div>
        </div>
      </div> 

      ))}
        </div>
  </section>
  </>
}
  </>
  )
}

export default Home

step 4:
Backend/productController.js
exports.getProducts = async (req, res, next) => {
  const resPerPage = 3;
const apiFeatures = new  APIFeatures(Product.find(),req.query).search().filter().paginate(resPerPage);
  const products = await apiFeatures.query;
1.  await new Promise(resolve => setTimeout(resolve,3000))(3 milli seconds data va late ahh load aga vaikrom)
  res.status(200).json({
    success: true,
    count: products.length,
    products,
  });
};


Steps:
Home Component la Irundhu Coding Spilit Panni Eluthitom

src/components/product/Product.js
import React from 'react'

function Product({product}) {
  return (
    <div className="col-sm-12 col-md-6 col-lg-3 my-3">
    <div className="card p-3 rounded">
      <img
        className="card-img-top mx-auto"
        src={product.images[0].image}
        alt='Loading'
      />
      <div className="card-body d-flex flex-column">
        <h5 className="card-title">
          <a href="">{product.name}</a>
        </h5>
        <div className="ratings mt-auto">
          <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
          </div>
          <span id="no_of_reviews">({product.numOfRevies} Reviews)</span>
        </div>
        <p className="card-text">${product.price}</p>
        <a href="#" id="view_btn" className="btn btn-block">View Details</a>
      </div>
    </div>
  </div>
  )
}

export default Product

step 2:
//src/components/Home.js
import React, { useEffect } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";

function Home() {
  const dispatch = useDispatch();
  const { products, loading } = useSelector((state) => state.productsState);
  useEffect(() => {
    dispatch(getProducts);
  }, []);

  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
            1.  {products &&
                products.map(product => (<Product product={product} />))}
            </div>
          </section>
        </>
      )}
    </>
  );
}

export default Home;


///Showing Error Alert


Frond End la Axios ala network problem nala Product get panna mudiyalaina 
Toast Error use Pannikalam
install Command
npm install --save react-toastify@10.0.4

//src/components/Home.js
import React, { useEffect } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";
import { toast } from "react-toastify";

function Home() {
  const dispatch = useDispatch();
  const { products, loading, error } = useSelector(
    (state) => state.productsState
  )
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts);
  },[error])

  

  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product product={product} />)}
            </div>
          </section>
        </>
      )}
    </>
  );
}

export default Home;

//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
        </Routes>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;

step 3:
sample modification in backend
//controllers/productcontroller.js
exports.getProducts = async (req, res, next) => {
  const resPerPage = 3;
const apiFeatures = new  APIFeatures(Product.find(),req.query).search().filter().paginate(resPerPage);
  const products = await apiFeatures.query;
 1. return next(new ErrorHandler('Unable to send products!',400))(Backend la Test kaga Error Create Panni Test Panrom)
  res.status(200).json({
    success: true,
    count: products.length,
    products,
  });
};




/////Creating Single Product Reducer

indha step ellam ethukuna development tool ahh network and redux dev tool la product vanthidichanu check panrathuku

step 1:
creating Slices
//slice/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name: 'product',
    initialState:{
        loading: false
    },
    reducers:{
        productRequest(state,action){
            return {
                loading: true
            }
        },
        productSuccess(state,action){
            return{
                loading: false,
                product: action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= productSlice;

export const {productRequest,productSuccess,productFail} = actions;

export default reducer;

step 2:
//components/store.js
import {combineReducers, configureStore} from "@reduxjs/toolkit";
import {thunk} from "redux-thunk";
import productsReducer from "./slices/productsSlice";
import productReducer from "./slices/productSlice"


const reducer = combineReducers({
       productsState: productsReducer, 
     1.  productState: productReducer 
}) 
 

const store = configureStore({ 
    reducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
    // middleware:[thunk]
})

export default store;

step 3:
//actions/productAction.js
import axios from 'axios';
import { productRequest, productSuccess,productFail,} from '../slices/productSlice'

export const getProduct = id => async (dispatch) =>{

    try{
        dispatch(productRequest())
        const {data} = await axios.get(`/api/v1/product/${id}`);
        dispatch(productSuccess(data))
    }catch(error){
        //handle error
        dispatch(productFail(error.response.data.message))
    }
}

step 4:
//components/product/productDetail.js
import React, { useEffect } from 'react'
import { useDispatch } from 'react-redux'
import { useParams } from 'react-router-dom';
import { getProduct } from '../../actions/productAction';


const ProductDetail = () => {
    const dispatch = useDispatch();
    const {id} = useParams()
 
    useEffect(()=>{
        dispatch(getProduct(id))
    },[])
  return (
    <>
    <div className="row f-flex justify-content-around">
    <div className="col-12 col-lg-5 img-fluid" id="product_image">
        <img src="/images/products/3.jpg" alt="sdf" height="500" width="500" />
    </div>

    <div className="col-12 col-lg-5 mt-5">
        <h3>Dell Inspiron 3511 Laptop, Intel i3-1115G4, 8GB, 512GB</h3>
        <p id="product_id">Product # 387874kkfjkf</p>

        <hr/>

        <div className="rating-outer">
            <div className="rating-inner"></div>
        </div>
        <span id="no_of_reviews">(56 Reviews)</span>

        <hr/>

        <p id="product_price">$456.00</p>
        <div className="stockCounter d-inline">
            <span className="btn btn-danger minus">-</span>

            <input type="number" className="form-control count d-inline" value="1" readOnly />

            <span className="btn btn-primary plus">+</span>
        </div>
         <button type="button" id="cart_btn" className="btn btn-primary d-inline ml-4">Add to Cart</button>

        <hr/>

        <p>Status: <span id="stock_status">In Stock</span></p>

        <hr/>

        <h4 className="mt-2">Description:</h4>
        <p>Processor: Intel i5-1235U (3.30 GHz up to 4.40 GHz), 10 Cores & 12MB Cache
            RAM & Storage: 8GB, 8Gx1, DDR4, 2666MHz Ach & 512GB SSD
            Display & Graphics: 15.6" FHD WVA AG 120Hz 250 nits Narrow Border & Integrated Graphics</p>
        <hr/>
        <p id="product_seller mb-3">Sold by: <strong>Amazon</strong></p>
        
        <button id="review_btn" type="button" className="btn btn-primary mt-4" data-toggle="modal" data-target="#ratingModal">
                    Submit Your Review
        </button>
        
        <div className="row mt-2 mb-5">
            <div className="rating w-50">

                <div className="modal fade" id="ratingModal" tabIndex="-1" role="dialog" aria-labelledby="ratingModalLabel" aria-hidden="true">
                    <div className="modal-dialog" role="document">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title" id="ratingModalLabel">Submit Review</h5>
                                <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div className="modal-body">

                                <ul className="stars" >
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                </ul>

                                <textarea name="review" id="review" className="form-control mt-3">

                                </textarea>

                                <button className="btn my-3 float-right review-btn px-4 text-white" data-dismiss="modal" aria-label="Close">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
                
    </div>

</div>

</div>
</>
  )
}

export default ProductDetail

step 5:
creating Routes
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/product/:id" element={<ProductDetail />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;

indha step ellam ethukuna development tool ahh network and redux dev tool la product vanthidichanu check panrathuku



////Show Product Details with Redux State

Display Product Details
Single Page La Project Display Panna Use Agum
Product Details Display Agum

install Command : npm i react-bootstrap@1.x

step 1:
//components/product/productDetail.js
import React, { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useParams } from 'react-router-dom';
import { getProduct } from '../../actions/productAction';
import Loader from '../layouts/Loader';
import {Carousel} from 'react-bootstrap';


const ProductDetail = () => {

   const {loading, product} = useSelector((state)=>state.productState)
    const dispatch = useDispatch();
    const {id} = useParams()
 
    useEffect(()=>{
        dispatch(getProduct(id))
    },[])
  return (
    <>
    {loading? <Loader/>:
    <>
    <div className="row f-flex justify-content-around">
    <div className="col-12 col-lg-5 img-fluid" id="product_image">
        <Carousel pause="hover">
            {product.images && product.images.map(image =>
                <Carousel.Item key={image._id}>
 <img className="d-block w-100" src={image.image} alt={product.name} height="500" width="500" />
                </Carousel.Item>)}
       
        </Carousel>
    </div>

    <div className="col-12 col-lg-5 mt-5">
        <h3>{product.name}</h3>
        <p id="product_id">Product # {product._id}</p>

        <hr/>

        <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
        </div>
        <span id="no_of_reviews">({product.numOfReviews})</span>

        <hr/>

        <p id="product_price">${product.price}</p>
        <div className="stockCounter d-inline">
            <span className="btn btn-danger minus">-</span>

            <input type="number" className="form-control count d-inline" value="1" readOnly />

            <span className="btn btn-primary plus">+</span>
        </div>
         <button type="button" id="cart_btn" className="btn btn-primary d-inline ml-4">Add to Cart</button>

        <hr/>

        <p>Status: <span id="stock_status" className={product.stock > 0 ?'greenColor':'redColor'}>{product.stock > 0 ?'In Stock':'Out Of Stock'}</span></p>

        <hr/>

        <h4 className="mt-2">Description:</h4>
        <p>{product.description}</p>
        <hr/>
        <p id="product_seller mb-3">Sold by: <strong>{product.seller}</strong></p>
        
        <button id="review_btn" type="button" className="btn btn-primary mt-4" data-toggle="modal" data-target="#ratingModal">
                    Submit Your Review
        </button>
        
        <div className="row mt-2 mb-5">
            <div className="rating w-50">

                <div className="modal fade" id="ratingModal" tabIndex="-1" role="dialog" aria-labelledby="ratingModalLabel" aria-hidden="true">
                    <div className="modal-dialog" role="document">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title" id="ratingModalLabel">Submit Review</h5>
                                <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div className="modal-body">

                                <ul className="stars" >
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                </ul>

                                <textarea name="review" id="review" className="form-control mt-3">

                                </textarea>

                                <button className="btn my-3 float-right review-btn px-4 text-white" data-dismiss="modal" aria-label="Close">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
                
    </div>

</div>

</div>
</>}
</>
  )
}

export default ProductDetail

step 2:
Routes set pannanum
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          1.<Route path="/product/:id" element={<ProductDetail />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


step 3:
//src/slices/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name: 'product',
    initialState:{
        loading: false,
     1.   product:[](product default get panrathuku theva padum)
    },
    reducers:{
        productRequest(state,action){
            return {
                loading: true
            }
        },
        productSuccess(state,action){
            return{
                loading: false,
                product: action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= productSlice;

export const {productRequest,productSuccess,productFail} = actions;

export default reducer;


step 4:
Link Kudukirathu last step
Button Link
//src/components/product.js
import React from 'react';
import { Link } from 'react-router-dom';

function Product({product}) {
  return (
    <div className="col-sm-12 col-md-6 col-lg-3 my-3">
    <div className="card p-3 rounded">
      <img
        className="card-img-top mx-auto"
        src={product.images[0].image}
        alt='Loading'
      />
      <div className="card-body d-flex flex-column">
        <h5 className="card-title">
          1.<Link to={`/product/${product._id}`}>{product.name}</Link>
        </h5>
        <div className="ratings mt-auto">
          <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
          </div>
          <span id="no_of_reviews">({product.numOfRevies} Reviews)</span>
        </div>
        <p className="card-text">${product.price}</p>
       2. <Link to={`/product/${product._id}`} id="view_btn" className="btn btn-block">View Details</Link>
      </div>
    </div>
  </div>
  )
}

export default Product


/////Search Products

By Keyword
By Category
By Price
By Rating


///React.js Pagination

npm i command: npm install react-js-pagination

//Step 1:

//src/components/Home.js

import React, { useEffect,useState } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";
import { toast } from "react-toastify";
1.import Pagination from 'react-js-pagination';

function Home() {
  const dispatch = useDispatch();
 2. const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  3.const [currentPage,setCurrentPage]=useState(1);
 4. const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
 5.   dispatch(getProducts( currentPage)) 
  }, [error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product product={product} />)}
            </div>
          </section>
        6.  {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default Home;


step 2:
//backend/controllers/producrControllers.js
//Pagination data per page - /api/v1/products?page=1 and `/api/v1/products?page=${currentPage}`
exports.getProducts = async (req, res, next) => {
  const resPerPage = 3;
const apiFeatures = new  APIFeatures(Product.find(),req.query).search().filter().paginate(resPerPage);
  const products = await apiFeatures.query;
 const totalProductsCount = await Product.countDocuments({});
  res.status(200).json({
    success: true,
    count: totalProductsCount,
    resPerPage,
    products
  })
}

step 3:
//src/slices/productSlices.js
import { createSlice } from "@reduxjs/toolkit";

const productsSlice = createSlice({
    name: 'products',
    initialState:{
        loading: false
    },
    reducers:{
        productsRequest(state,action){
            return {
                loading: true
            }
        },
      1.  productsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products,
                productsCount:action.payload.count,
                resPerPage: action.payload.resPerPage
            }
        },
        productsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= productsSlice;

export const {productsRequest,productsSuccess,productsFail} = actions;

export default reducer;

step 4:
src/actions/productsActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = (currentPage)=> async (dispatch) =>{

    try{
        dispatch(productsRequest())
     1.   const {data} = await axios.get(`/api/v1/products?page=${currentPage}`);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}

Pagination Success


///Search Products

step 1:
Header la Irundhu seach coding cut panni search component thaniya uruvakki paste pannitu header la search component ahh import pannikirom

//layouts/Search.js

import React, { useState } from 'react'
import {useNavigate} from 'react-router-dom'


const Search = () => {

   const navigate =  useNavigate();
   const [keyword,setKeyword]= useState("")
   
    const searchHandler =(e)=>{
        e.preventDefault();
        navigate(`/search/${keyword}`)
    }
  return (
    <form onSubmit={searchHandler}>
    <div className="input-group">
        
    <input
      type="text"
      id="search_field"
      className="form-control"
      placeholder="Enter Product Name ..."
      onChange={(e)=>setKeyword(e.target.value)}
      value={keyword}
    />
    <div className="input-group-append">
      <button id="search_btn" className="btn">
        <i className="fa fa-search" aria-hidden="true"></i>
      </button>
    </div>
   
  </div>
  </form>
 
  )
}

export default Search

step 2:
//component/product/productSearch.js 
import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, currentPage)) 
  }, [keyword,error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product product={product} />)}
            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;

step 3:
Product Search Route Kuduthikirom
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;

step 4:
productaction la apk ahh correct ahh set panrom
//src/productsActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = (keyword,currentPage)=> async (dispatch) =>{

    try{
        dispatch(productsRequest())
        let link = `/api/v1/products?page=${currentPage}`;

        if(keyword){
            link += `&keyword=${keyword}`
        }
 
        const {data} = await axios.get(link);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}

step 5:
Filter Component ku Pagination Varama Irukira mathiri code mathi eluthurom
//backend/controllerla/productController.js 

//Get All Products - /api/v1/products
//Get Search Product - /api/v1/products?keyword=Dell
//Get Filter Product - /api/v1/products?category=Headphones
//Get Filter Product Price - /api/v1/products?price[gte]=254
//Pagination data per page - /api/v1/products?page=1 and `/api/v1/products?page=${currentPage}`
exports.getProducts = catchAsyncError(async (req, res, next) => {
  const resPerPage = 3;


let buildQuery = () =>{
  return new APIFeatures(Product.find(),req.query).search().filter()
}
const filteredProductsCount = await buildQuery().query.countDocuments({})
const totalProductsCount = await Product.countDocuments({})

let productsCount = totalProductsCount;
if(filteredProductsCount !== totalProductsCount ){
  productsCount = filteredProductsCount;
}

  const products = await buildQuery().paginate(resPerPage).query;

 
  res.status(200).json({
    success: true,
    count: productsCount,
    resPerPage,
    products
  })
});


Search Field Success

step :
///Header.js La Home ku navigate agura mathiri Link kudukirom image ku 
 <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>

step:
//Search Panra data vera page ku marumpothu search box la irundhu automatic ahh clear agurathuku 

//layout/search.js

import React, { useEffect, useState } from 'react'
import {useLocation, useNavigate} from 'react-router-dom'



const Search = () => {

   const navigate =  useNavigate();
   1.const location = useLocation();
   const [keyword,setKeyword]= useState("")
   
    const searchHandler =(e)=>{
        e.preventDefault();
        navigate(`/search/${keyword}`)
    }
   1. const clearKeyword = () =>{
      setKeyword("");
    }

    useEffect(()=>{
   2.   if(location.pathname === '/'){
        clearKeyword();
      }
    },[location])
  return (
    <form onSubmit={searchHandler}>
    <div className="input-group">
        
    <input
      type="text"
      id="search_field"
      className="form-control"
      placeholder="Enter Product Name ..."
      onChange={(e)=>setKeyword(e.target.value)}
      value={keyword}
    />
    <div className="input-group-append">
      <button id="search_btn" className="btn">
        <i className="fa fa-search" aria-hidden="true"></i>
      </button>
    </div>
   
  </div>
  </form>
 
  )
}

export default Search


///AlighnMent of search Component 
//components/product/product.js
import React from 'react';
import { Link } from 'react-router-dom';

function Product({product,col}) {
  return (
   1. <div className={`col-sm-12 col-md-6 col-lg-${col} my-3`}>
    <div className="card p-3 rounded">
      <img
        className="card-img-top mx-auto"
        src={product.images[0].image}
        alt={product.name}
      />
      <div className="card-body d-flex flex-column">
        <h5 className="card-title">
          <Link to={`/product/${product._id}`}>{product.name}</Link>
        </h5>
        <div className="ratings mt-auto">
          <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
          </div>
          <span id="no_of_reviews">({product.numOfRevies} Reviews)</span>
        </div>
        <p className="card-text">${product.price}</p>
        <Link to={`/product/${product._id}`} id="view_btn" className="btn btn-block">View Details</Link>
      </div>
    </div>
  </div>
  )
}

export default Product

//product/productSearch.js
import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, currentPage)) 
  }, [keyword,error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
               <div className="col-6 col-md-3 mb-5 mt-5">
                <div className="px-5">

                </div>

               </div>
               <div className="col-6 col-md-9">
                <div className="row">

                {products &&
               1. products.map((product) => <Product col={4} product={product} />)}
                </div>

               </div>

            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;

//components/Home.js
import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, currentPage)) 
  }, [keyword,error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
               <div className="col-6 col-md-3 mb-5 mt-5">
                <div className="px-5">

                </div>

               </div>
               <div className="col-6 col-md-9">
                <div className="row">

                {products &&
              1.  products.map((product) => <Product col={4} product={product} />)}
                </div>

               </div>

            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;


///Slider 
///Price Fillter
command: 
Price filter Slider
npm i rc-slider
Amount Identifier
npm i rc-tooltip

Step 1:
//component/product/ProductSearch.js
import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";
1.import Slider from "rc-slider";
2.import Tooltip from 'rc-tooltip'
3.import 'rc-slider/assets/index.css';
4.import 'rc-tooltip/assets/bootstrap.css'


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
6.  const [price,setPrice]=useState([1,1000]);
 7. const [priceChanged,setPriceChanged]=useState(price);

  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, priceChanged, currentPage)) 
 8. }, [keyword,error, dispatch, currentPage,priceChanged])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
               <div className="col-6 col-md-3 mb-5 mt-5">
                <div className="px-5" onMouseUp={()=>setPriceChanged(price)}>
             10.     <Slider 
                       range={true}
                       marks = {
                        {
                          1:"$1",
                          1000:"$1000"
                        }
                       } 
                       min={1}
                       max={1000}
                       defaultValue={price}
                       onChange={(price)=>{
                        setPrice(price)
                       }}
                       handleRender={
                        renderProps => {
                          return (
                            <Tooltip overlay={`$${renderProps.props['aria-valuenow']}`}>
                              <div {...renderProps.props}></div>
                            </Tooltip>
                          )
                        }
                       }
                  />
                </div>

               </div>
               <div className="col-6 col-md-9">
                <div className="row">

                {products &&
                products.map((product) => <Product col={4} product={product} />)}
                </div>

               </div>

            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;

Step 2:
//src/actions/productActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = (keyword, price, currentPage) => async (dispatch) =>{

    try{
        dispatch(productsRequest())
        let link = `/api/v1/products?page=${currentPage}`;

        if(keyword){
            link += `&keyword=${keyword}`
        }
        if(price){
            link += `&price[gte]=${price[0]}&price[lte]=${price[1]}`
        }

        const {data} = await axios.get(link);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}


Step 3:
//components/Home.js
import React, { useEffect,useState } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';

function Home() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
  1.  dispatch(getProducts(null,null,currentPage)) 
  }, [error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product col={3} product={product} />)}
            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default Home;

Price Filter Success

///Catagory Filter
 
Step 1:
///product/ProductSearch.js

import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";
import Slider from "rc-slider";
import Tooltip from 'rc-tooltip'
import 'rc-slider/assets/index.css';
import 'rc-tooltip/assets/bootstrap.css'


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const [price,setPrice]=useState([1,1000]);
  const [priceChanged,setPriceChanged]=useState(price);
  const [category, setCategory] = useState(null);

  const categories = [
    'Electronics',
    'Mobile Phones',
    'Laptops',
    'Accessories',
    'Headphones',
    'Food',
    'Books',
    'Cloths/Shoes',
    'Beauty/Health',
    'Sports',
    'outdoor',
    'Home'
  ];

  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, priceChanged, category,currentPage)) 
  }, [keyword,error, dispatch, currentPage,priceChanged,category])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
               <div className="col-6 col-md-3 mb-5 mt-5">
                {/*Price Filter*/}
                <div className="px-5" onMouseUp={()=>setPriceChanged(price)}>
                  <Slider 
                       range={true}
                       marks = {
                        {
                          1:"$1",
                          1000:"$1000"
                        }
                       } 
                       min={1}
                       max={1000}
                       defaultValue={price}
                       onChange={(price)=>{
                        setPrice(price)
                       }}
                       handleRender={
                        renderProps => {
                          return (
                            <Tooltip overlay={`$${renderProps.props['aria-valuenow']}`}>
                              <div {...renderProps.props}></div>
                            </Tooltip>
                          )
                        }
                       }
                  />
                </div>
                <hr className="my-5"/>
                {/*Catagory Filter*/}
                <div className="mt-5">
                  <h3 className="mb-3">Categories</h3>
                  <ul className="pl-0">
                    {categories.map(category => 
                      
                      <li style={{
                        cursor:"pointer",
                        listStyleType:"none"
                      }}
                      key={category}
                      onClick={()=>{
                         setCategory(category)
                      }}
                      > {category}</li>
                      )}
                    
                  </ul>

                </div>

               </div>
               <div className="col-6 col-md-9">
                <div className="row">

                {products &&
                products.map((product) => <Product col={4} product={product} />)}
                </div>

               </div>

            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;

step 2:
//actions/productsActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = (keyword, price,category, currentPage) => async (dispatch) =>{

    try{
        dispatch(productsRequest())
        let link = `/api/v1/products?page=${currentPage}`;

        if(keyword){
            link += `&keyword=${keyword}`
        }
        if(price){
            link += `&price[gte]=${price[0]}&price[lte]=${price[1]}`
        }
        if(category){
            link += `&category=${category}`
        }

        const {data} = await axios.get(link);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}


Step 3:
//components/Home.js
import React, { useEffect,useState } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';

function Home() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(null,null,null,currentPage)) 
  }, [error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product col={3} product={product} />)}
            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default Home;

Catogory Filter Success


////Rating Filter
step 1:

//components/products/ProductSearch.js
import React, { useEffect,useState } from "react";
import MetaData from ".././layouts/MetaData";
import { getProducts } from "../../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from ".././layouts/Loader";
import Product from ".././product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';
import { useParams } from "react-router-dom";
import Slider from "rc-slider";
import Tooltip from 'rc-tooltip'
import 'rc-slider/assets/index.css';
import 'rc-tooltip/assets/bootstrap.css'


function ProductSearch() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const [price,setPrice]=useState([1,1000]);
  const [priceChanged,setPriceChanged]=useState(price);
  const [category, setCategory] = useState(null);
  1.const [rating, setRating]= useState(0);

  const categories = [
    'Electronics',
    'Mobile Phones',
    'Laptops',
    'Accessories',
    'Headphones',
    'Food',
    'Books',
    'Cloths/Shoes',
    'Beauty/Health',
    'Sports',
    'outdoor',
    'Home'
  ];

  const {keyword} = useParams();
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
    dispatch(getProducts(keyword, priceChanged, category,rating,currentPage)) 
  }, [keyword,error, dispatch, currentPage,priceChanged,category,rating])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Search Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
               <div className="col-6 col-md-3 mb-5 mt-5">
                {/*Price Filter*/}
                <div className="px-5" onMouseUp={()=>setPriceChanged(price)}>
                  <Slider 
                       range={true}
                       marks = {
                        {
                          1:"$1",
                          1000:"$1000"
                        }
                       } 
                       min={1}
                       max={1000}
                       defaultValue={price}
                       onChange={(price)=>{
                        setPrice(price)
                       }}
                       handleRender={
                        renderProps => {
                          return (
                            <Tooltip overlay={`$${renderProps.props['aria-valuenow']}`}>
                              <div {...renderProps.props}></div>
                            </Tooltip>
                          )
                        }
                       }
                  />
                </div>
                <hr className="my-5"/>
                {/*Catagory Filter*/}
                <div className="mt-5">
                  <h3 className="mb-3">Categories</h3>
                  <ul className="pl-0">
                    {categories.map(category => 
                      
                      <li style={{
                        cursor:"pointer",
                        listStyleType:"none"
                      }}
                      key={category}
                      onClick={()=>{
                         setCategory(category)
                      }}
                      > {category}</li>
                      )}
                    
                  </ul>

                </div>
                {/*Ratings Filter*/}
             1.   <hr className="my-5"/>
                <div className="mt-5">
                  <h4 className="mb-3">Ratings</h4>
                  <ul className="pl-0">
                    {[5,4,3,2,1].map(star => 
                      
                      <li style={{
                        cursor:"pointer",
                        listStyleType:"none"
                      }}
                      key={star}
                      onClick={()=>{
                         setRating(star)
                      }}
                      > <div className="rating-outer">
                        <div className="rating-inner" style={{width:`${star*20}%`}}>

                        </div>
                        </div></li>
                      )}
                    
                  </ul>
                </div>

               </div>
               <div className="col-6 col-md-9">
                <div className="row">

                {products &&
                products.map((product) => <Product col={4} product={product} />)}
                </div>

               </div>

            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default ProductSearch;

step 2:
//src/actions/productsActions.js

import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice'

export const getProducts = (keyword, price,category,rating, currentPage) => async (dispatch) =>{

    try{
        dispatch(productsRequest())
        let link = `/api/v1/products?page=${currentPage}`;

        if(keyword){
            link += `&keyword=${keyword}`
        }
        if(price){
            link += `&price[gte]=${price[0]}&price[lte]=${price[1]}`
        }
        if(category){
            link += `&category=${category}`
        }
        if(rating){
            link += `&ratings=${rating}`
        }

        const {data} = await axios.get(link);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}

step 3:
//components/Home.js
import React, { useEffect,useState } from "react";
import MetaData from "./layouts/MetaData";
import { getProducts } from "../actions/productsActions";
import { useDispatch, useSelector } from "react-redux";
import Loader from "./layouts/Loader";
import Product from "./product/Product";
import { toast } from "react-toastify";
import Pagination from 'react-js-pagination';

function Home() {
  const dispatch = useDispatch();
  const { products, loading, error,productsCount, resPerPage } = useSelector(
    (state) => state.productsState
  )
  const [currentPage,setCurrentPage]=useState(1);
  const setCurrentPageNo = (pageNo) =>{
    setCurrentPage(pageNo)

  }
  useEffect(() => {
    if(error){
     return  toast.error(error,{
      position: toast.error
     
      })
    }
   1. dispatch(getProducts(null,null,null,null,currentPage)) 
  }, [error, dispatch, currentPage])
  return (
    <>
      {loading ? (
        <Loader />
      ) : (
        <>
          <MetaData title={"Buy Best Products"} />
          <h1 id="products_heading">Latest Products</h1>
          <section id="products" className="container mt-5">
            <div className="row">
              {products &&
                products.map((product) => <Product col={3} product={product} />)}
            </div>
          </section>
          {productsCount > 0 && productsCount > resPerPage?
          <div className="d-flex justify-content-center mt-5">
              <Pagination 
                 activePage={currentPage}
                 onChange={setCurrentPageNo}  
                 totalItemsCount={productsCount}
                 itemsCountPerPage={resPerPage}
                 nextPageText={'Next'}
                 firstPageText={'First'}
                 lastPageText={'Last'}
                 itemClass={'page-item'}
                 linkClass={'page-link'}
              />
          </div> : null }
        </>
      )}
    </>
  );
}

export default Home;

Rating Filter is Succesfully Completed


///User Authentication Frontend

1.Login
2.Register
3.Load Logged User Data
4.Show Profile
5.Update Profile
6.Update Password
7.Forgot & Reset Password
8.User profile picture or Avatar upload

///Product and Product Actions File Ahh orunginichikrom

//src/actions/productActions.js
import axios from 'axios';
import {productsFail, productsRequest, productsSuccess} from '../slices/productsSlice';
import { productRequest, productSuccess,productFail,} from '../slices/productSlice'

export const getProducts = (keyword, price,category,rating, currentPage) => async (dispatch) =>{

    try{
        dispatch(productsRequest())
        let link = `/api/v1/products?page=${currentPage}`;

        if(keyword){
            link += `&keyword=${keyword}`
        }
        if(price){
            link += `&price[gte]=${price[0]}&price[lte]=${price[1]}`
        }
        if(category){
            link += `&category=${category}`
        }
        if(rating){
            link += `&ratings=${rating}`
        }

        const {data} = await axios.get(link);
        dispatch(productsSuccess(data))
    }catch(error){
        //handle error
        dispatch(productsFail(error.response.data.message))
    }
}



export const getProduct = id => async (dispatch) =>{

    try{
        dispatch(productRequest())
        const {data} = await axios.get(`/api/v1/product/${id}`);
        dispatch(productSuccess(data))
    }catch(error){
        //handle error
        dispatch(productFail(error.response.data.message))
    }
}


///Login Reducer

Step 1:
//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticate: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticate: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {loginRequest,loginSuccess,loginFail} = actions;

export default reducer;

step 2:
//src/store.js
import {combineReducers, configureStore} from "@reduxjs/toolkit";
import {thunk} from "redux-thunk";
import productsReducer from "./slices/productsSlice";
import productReducer from "./slices/productSlice";
import authReducer from "./slices/authSlice";
     

const reducer = combineReducers({
       productsState: productsReducer, 
       productState: productReducer,
       authState: authReducer
}) 
 

const store = configureStore({ 
    reducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
    // middleware:[thunk]
})

export default store;

step 3:
//src/actions/userActions.js
import { loginFail,loginRequest,loginSuccess } from "../slices/authSlice";
import axios from 'axios';

export const login = (email, password) => async (dispatch) => {

    try {
          dispatch(loginRequest())
          const {data} = await axios.post(`/api/v1/login`,{email,password})
          dispatch(loginSuccess(data))
    }catch(error){
          dispatch(loginFail(error.response.data.message))
    }
}


///Creating Login Component

//step 1:

///components/user/Login.js

import React, { useEffect, useState } from "react";
import MetaData from '../layouts/MetaData'
import {login} from "../../actions/userActions"
import { useDispatch, useSelector } from "react-redux";
import {toast} from 'react-toastify'
import { useNavigate } from 'react-router-dom';


const Login = () => {

    const [email,setEmail]=useState("")
    const [password,setPassword]=useState("")
    const dispatch = useDispatch();
    const navigate = useNavigate();

    const {loading, error, isAuthenticated} = useSelector(state=>state.authState)

    
    const submitHandler = (e)=>{
        e.preventDefault();
       dispatch(login(email,password))
    
    }
    useEffect(() => {
        if(isAuthenticated) {
            navigate('/')
        }

        if (error) {    
          toast.error(error, {
            position: "bottom-center" 
          })
          return
        }
      }, [error,isAuthenticated]);
 
      
      

  return (
    <>
    <MetaData title={`Login`}/>
      <div className="row wrapper">
        <div className="col-10 col-lg-5">
          <form  onSubmit={submitHandler} className="shadow-lg">
            <h1 className="mb-3">Login</h1>
            <div className="form-group">
              <label htmlFor="email_field">Email</label>
              <input
                type="email"
                id="email_field"
                className="form-control"
                value={email}
                onChange={e=> setEmail(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label htmlFor="password_field">Password</label>
              <input
                type="password"
                id="password_field"
                className="form-control"
                value={password}
                onChange={e=> setPassword(e.target.value)}
              />
            </div>

            <a href="#" className="float-right mb-4">
              forgot Password?
            </a>

            <button id="login_button" type="submit" className="btn btn-block py-3" disabled={loading}>
              LOGIN
            </button>

            <a href="#" className="float-right mt-3">
              New User?
            </a>
          </form>
        </div>
      </div>
    </>
  );
};

export default Login;

//step 2:
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;

step 3:
Link Kudukanum
//components/layouts/Header.js
import React from 'react';
import Search from './Search';
import { Link } from 'react-router-dom';


 const Header = () => {
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
       1. <Link to="/login" className="btn" id="login_btn">Login</Link>

        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header


///Toast Clear Error Panrom following Steps Valiya

Toast Error clear Pannnalaina Error state la irukirathunala Toast Kamichitae irukum so error clear panni vittutrom ippo home component la irundhu login component ku vanthalum error kamikatu

//components/user/Login.js
import React, { useEffect, useState } from "react";
import MetaData from '../layouts/MetaData'
import {clearAuthError, login} from "../../actions/userActions"
import { useDispatch, useSelector } from "react-redux";
import {toast} from 'react-toastify'
import { useNavigate } from 'react-router-dom';


const Login = () => {

    const [email,setEmail]=useState("")
    const [password,setPassword]=useState("")
    const dispatch = useDispatch();
    const navigate = useNavigate();

    const {loading, error, isAuthenticated} = useSelector(state=>state.authState)

    
    const submitHandler = (e)=>{
        e.preventDefault();
       dispatch(login(email,password))
    
    }
    useEffect(() => {
        if(isAuthenticated) {
            navigate('/')
        }

        if (error) {    
          toast(error, {
            position: "bottom-center",
            type: 'error',
           1. onOpen:() =>{
                dispatch(clearAuthError)
            } 

          })
          return
        }
      }, [error,isAuthenticated, dispatch]);
 
      
      

  return (
    <>
    <MetaData title={`Login`}/>
      <div className="row wrapper">
        <div className="col-10 col-lg-5">
          <form  onSubmit={submitHandler} className="shadow-lg">
            <h1 className="mb-3">Login</h1>
            <div className="form-group">
              <label htmlFor="email_field">Email</label>
              <input
                type="email"
                id="email_field"
                className="form-control"
                value={email}
                onChange={e=> setEmail(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label htmlFor="password_field">Password</label>
              <input
                type="password"
                id="password_field"
                className="form-control"
                value={password}
                onChange={e=> setPassword(e.target.value)}
              />
            </div>

            <a href="#" className="float-right mb-4">
              forgot Password?
            </a>

            <button id="login_button" type="submit" className="btn btn-block py-3" disabled={loading}>
              LOGIN
            </button>

            <a href="#" className="float-right mt-3">
              New User?
            </a>
          </form>
        </div>
      </div>
    </>
  );
};

export default Login;


step 2:

//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticate: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticate: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
       1. clearError(state,action){
            return{
                ...state, 
                error: null
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {loginRequest,loginSuccess,loginFail, clearError} = actions;

export default reducer;


Step 3:

//src/actions/userActions.js
import { loginFail,loginRequest,loginSuccess, clearError } from "../slices/authSlice";
import axios from 'axios';

export const login = (email, password) => async (dispatch) => {

    try {
          dispatch(loginRequest())
          const {data} = await axios.post(`/api/v1/login`,{email,password})
          dispatch(loginSuccess(data))
    }catch(error){
          dispatch(loginFail(error.response.data.message))
    }
}

export const clearAuthError = dispatch =>{
      dispatch(clearError())
}


///Register Reducer & Action

step 1:

//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticate: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticate: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticate: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail
} = actions;

export default reducer;

step 2:
//src/actions/userActions.js
import { 
      loginFail,
      loginRequest,
      loginSuccess, 
      clearError,
      registerFail,
      registerRequest,
      registerSuccess
 } from "../slices/authSlice";
import axios from 'axios';

export const login = (email, password) => async (dispatch) => {

    try {
          dispatch(loginRequest())
          const {data} = await axios.post(`/api/v1/login`,{email,password})
          dispatch(loginSuccess(data))
    }catch(error){
          dispatch(loginFail(error.response.data.message))
    }
}

export const clearAuthError = dispatch =>{
      dispatch(clearError())
}


export const register = (userData) => async (dispatch) => {

      try {
            dispatch(registerRequest())
            const config ={
                   headers:{
                        'Content-type':'multipart/form-data'
                   }
            }
            const {data} = await axios.post(`/api/v1/register`,userData,config)
            dispatch(registerSuccess(data))
      }catch(error){
            dispatch(registerFail(error.response.data.message))
      }
  }


////creating Register Component

readAsDataURL ithu file ahh irukira image ahh url format vagi vachikum
FileReader indha function um image ahh read panni eduthu vachikum


///components/user/Register.js
import React, { useEffect, useState } from 'react';
import { UseDispatch, useDispatch, useSelector } from 'react-redux';
import {register, clearAuthError} from '../../actions/userActions';
import {toast} from 'react-toastify';
import { useNavigate } from 'react-router-dom';




const Register = () => {
    const [userData,setUserData]=useState({ 
        name:"",
        email:"",
        password:""
    }  
    );
    const [avatar,setAvatar]=useState("");
    const [avatarPreview,setAvatarPreview] = useState("/images/default_avatar.png");
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const {loading,error,isAuthenticated} = useSelector(state => state.authState)

    const onChange = (e) =>{
        if(e.target.name === 'avatar'){
           const reader = new FileReader;
             reader.onload = () =>{
                if(reader.readyState === 2){
                    setAvatarPreview(reader.result);
                   setAvatar(e.target.files[0])
                }
             }
            
           reader.readAsDataURL(e.target.files[0])

        }else{
        setUserData({...userData, [e.target.name]:e.target.value})
        }
    }

    const submitHandler = (e)=>{
        e.preventDefault();
        const formData = new FormData();
        formData.append('name', userData.name)
        formData.append('email',userData.email)
        formData.append('password',userData.password)
        formData.append('avatar',avatar)
        dispatch(register(formData))
    }
    useEffect(() => {
        if(isAuthenticated){
            navigate('/');
            return
        }
        
       

        if (error) {    
        toast(error, {
            position: "bottom-center",
            type: 'error',
            onOpen:() =>{
                dispatch(clearAuthError)
            } 

        })
        return
        }
    }, [error,isAuthenticated]);
  return (
    <>
       <div className="row wrapper">
		<div className="col-10 col-lg-5">
        <form  onSubmit={submitHandler} className="shadow-lg" encType='multipart/form-data'>
            <h1 className="mb-3">Register</h1>

          <div className="form-group">
            <label htmlFor="email_field">Name</label>
            <input  name='name' onChange={onChange} type="name"  id="name_field" className="form-control"  />
          </div>

            <div className="form-group">
              <label htmlFor="email_field">Email</label>
              <input
                type="email"
                id="email_field"
                name='email'
                onChange={onChange}
                className="form-control"
                
              />
            </div>
  
            <div className="form-group">
              <label htmlFor="password_field">Password</label>
              <input
                type="password"
                id="password_field"
                name='password'
                onChange={onChange}
                className="form-control"
              
              />
            </div>

            <div className='form-group'>
              <label htmlFor='avatar_upload'>Avatar</label>
              <div className='d-flex align-items-center'>
                  <div>
                      <figure className='avatar mr-3 item-rtl'>
                          <img
                              src={avatarPreview}
                              className='rounded-circle'
                              alt='image'
                          />
                      </figure>
                  </div>
                  <div className='custom-file'>
                      <input
                          type='file'
                          name='avatar'
                          onChange={onChange}
                          className='custom-file-input'
                          id='customFile'
                      />
                      <label className='custom-file-label' htmlFor='customFile'>
                          Choose Avatar
                      </label>
                  </div>
              </div>
          </div>
  
            <button
              id="register_button"
              type="submit"
              className="btn btn-block py-3"
              disabled={loading}
            >
              REGISTER
            </button>
          </form>
		  </div>
    </div>


    </>
  )
}

export default Register

step 2:
Router Setups
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";

function App() {
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


///Backend la indha command ahh install pannikanum
///npm install Command : npm i multer

Multi Path Data (apdina image oda vara datas)va Node js la install panna uthavum


nama frondendla kudukira image backend and database la store aganumna 
below coding ahh backend la payanpaduthanum

Backendla Image Store Panrathuku 
Uploades/user uploads folder inside la user folder create panrom
step 1:

//routes/auth.js

const express = require('express');
const multer = require('multer');
const path = require('path')

1.const upload = multer({storage: multer.diskStorage({
    destination: function(req, file, cb){
        cb(null,path.join(__dirname, '..', 'uploads/user'))
    },
    filename: function(req, file, cb){
        cb(null,file.originalname)
    }
})})

const { 
registerUser, 
loginUser, 
logoutUser, 
forgotPassword, 
resetPassword, 
getUserProfile, 
changePassword, 
updateProfile, 
getAllUsers, 
getUser, 
updateUser, 
deleteUser} = require('../controllers/authController');

const router = express.Router();
const {isAuthenticatedUser, authorizeRoles} = require('../middlewares/authenticate');

router.route('/register').post(upload.single('avatar'),registerUser);
router.route('/login').post(loginUser);
router.route('/logout').get(logoutUser);
router.route('/password/forgot').post(forgotPassword);
router.route('/password/reset/:token').post(resetPassword);
router.route('/password/change').put(isAuthenticatedUser, changePassword);
router.route('/myprofile').get(isAuthenticatedUser, getUserProfile);
router.route('/update').put(isAuthenticatedUser, updateProfile);


//Admin routes

router.route('/admin/users').get(isAuthenticatedUser, authorizeRoles('admin'), getAllUsers);
router.route('/admin/user/:id').get(isAuthenticatedUser, authorizeRoles('admin'), getUser)
                               .put(isAuthenticatedUser, authorizeRoles('admin'), updateUser)
                               .delete(isAuthenticatedUser, authorizeRoles('admin'), deleteUser)


module.exports = router;  

step 2:
//controllers/authController.js
//Register User - /api/v1/register
exports.registerUser = catchAsyncError(async (req, res, next)=>{

    const {name, email, password} = req.body

  1.  let avatar;
    if(req.file){
      avatar = `${req.protocol}://${req.host}/uploads/user/${req.file.originalname}`
    }

    const user = await User.create({
        name,
        email,
        password,
        avatar
    });

    sendToken(user, 201, res)
})

step 3:
require fiel ahh eduthiten
//models/userModel.js
avatar:{
        type: String
       
    },


step 4:
backend/app.js
const express = require('express');
const app = express();
const errorMiddleware = require('./middlewares/error')
const cookieParser = require('cookie-parser')
const path = require('path')

app.use(express.json());
app.use(cookieParser());
1.app.use('/uploads', express.static(path.join(__dirname,'uploads')))

const products =  require('./routes/product')
const auth = require('./routes/auth')
const order = require('./routes/order') 
 
app.use('/api/v1/',products)
app.use('/api/v1/',auth)
app.use('/api/v1/',order)

app.use(errorMiddleware)

module.exports = app;


//Login Component la new user ku Link Kudukurom
//components/user/login.js
    import React, { useEffect, useState } from "react";
    import MetaData from '../layouts/MetaData'
    import {clearAuthError, login} from "../../actions/userActions"
    import { useDispatch, useSelector } from "react-redux";
    import {toast} from 'react-toastify'
    import { Link, useNavigate } from 'react-router-dom';


    const Login = () => {

        const [email,setEmail]=useState("")
        const [password,setPassword]=useState("")
        const dispatch = useDispatch();
        const navigate = useNavigate();

        const {loading, error, isAuthenticated} = useSelector(state=>state.authState)

        
        const submitHandler = (e)=>{
            e.preventDefault();
        dispatch(login(email,password))
        
        }
        useEffect(() => {
            if(isAuthenticated) {
                navigate('/')
                return
            }

            if (error) {    
            toast(error, {
                position: "bottom-center",
                type: 'error',
                onOpen:() =>{
                    dispatch(clearAuthError)
                } 

            })
            return
            }
        }, [error,isAuthenticated, dispatch]);
    
        
        

    return (
        <>
        <MetaData title={`Login`}/>
        <div className="row wrapper">
            <div className="col-10 col-lg-5">
            <form  onSubmit={submitHandler} className="shadow-lg">
                <h1 className="mb-3">Login</h1>
                <div className="form-group">
                <label htmlFor="email_field">Email</label>
                <input
                    type="email"
                    id="email_field"
                    className="form-control"
                    value={email}
                    onChange={e=> setEmail(e.target.value)}
                />
                </div>

                <div className="form-group">
                <label htmlFor="password_field">Password</label>
                <input
                    type="password"
                    id="password_field"
                    className="form-control"
                    value={password}
                    onChange={e=> setPassword(e.target.value)}
                />
                </div>

                <a href="#" className="float-right mb-4">
                forgot Password?
                </a>

                <button id="login_button" type="submit" className="btn btn-block py-3" disabled={loading}>
                LOGIN
                </button>

                <Link to="/register" className="float-right mt-3">
                New User?
                </Link>
            </form>
            </div>
        </div>
        </>
    );
    };

    export default Login;


///Bakend Folderla Correck ana image path kudukarathuku backend url config correct ahh kudukanum
step 1:
//backend/config/config.env
PORT = 8000
NODE_ENV = development
DB_LOCAL_URI = mongodb://127.0.0.1:27017/shoppy
JWT_SECRET=6CCLCx5uDJ
JWT_EXPIRES_TIME=7d
COOKIE_EXPIRES_TIME=7
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=dd9dab8137ca1d
SMTP_PASS=100a7d1168dff3
SMTP_FROM_NAME=shoppy
SMTP_FROM_EMAIL=noreply@jvlcart.com
BACKEND_URL=http://127.0.0.1:8000

step 2:
//Register User - /api/v1/register
exports.registerUser = catchAsyncError(async (req, res, next)=>{

    const {name, email, password} = req.body

    let avatar;
    if(req.file){
  1.    avatar = `${process.env.BACKEND_URL}/uploads/user/${req.file.originalname}`
    }

    const user = await User.create({
        name,
        email,
        password,
        avatar
    });

    sendToken(user, 201, res)
})



////Load Logged User Data

Ithuku ethuku use aguthina Login Pannita refresh analum namaku login user oda data kedaikum
Entha Page la Ponalum Login User Data Kedaikum Logout Panra varaikum

step 1:
//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticate: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        loadUserRequest(state,action){
            return {
                ...state,
                 isAuthenticated: false,
                loading: true 
            }
        },
        loadUserSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
       loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail,
    loadUserRequest,
    loadUserSuccess,
    loadUserFail
} = actions;

export default reducer;

step 2:
//actions/userActions.js
  export const  loadUser = async (dispatch) => {

      try {
            dispatch(loadUserRequest())
            const {data} = await axios.get(`/api/v1/myprofile`);
            dispatch(loadUserSuccess(data))
      }catch(error){
            dispatch(loadUserFail(error.response.data.message))
      }
  }

step 3:
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect} from "react";


function App() {

1.  useEffect(()=>{
    store.dispatch(loadUser)
  })
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


///Show User Deatails

Login Panni irundha Login Button Theriyara idathila User Details Theriyanum

//Header.js
import React from 'react';
import Search from './Search';
import { Link } from 'react-router-dom';
import {useSelector} from 'react-redux';


 const Header = () => {
   const {isAuthenticated}=useSelector(state => state.authState)
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 'LoggedIn' :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header



///Show user Details Using Header.js

//Header.js
import React from 'react';
import Search from './Search';
import { Link } from 'react-router-dom';
import {useSelector} from 'react-redux';
import {DropdownButton,Dropdown,Image} from 'react-bootstrap';


 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState)
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item className='text-danger'>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header


///Logout User

Step 1:
//src/slices/authSlices.js

import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticated: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        loadUserRequest(state,action){
            return {
                ...state,
                 isAuthenticated: false,
                loading: true 
            }
        },
        loadUserSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
       loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        logoutSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: false,
                
            }
        },
       logoutFail(state,action){
            return{
                ...state, 
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail,
    loadUserRequest,
    loadUserSuccess,
    loadUserFail,
    logoutFail,
    logoutSuccess
} = actions;

export default reducer;

step 2:

//actions/userActions.js
 export const  logout = async (dispatch) => {

      try {
            await axios.get(`/api/v1/logout`);
            dispatch(logoutSuccess())
      }catch(error){ 
            dispatch(logoutFail())
      }
  }

step 3:
//Components/Header.js
import React from 'react';
import Search from './Search';
import { Link } from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import {Dropdown,Image} from 'react-bootstrap';
import { logout } from '../../actions/userActions';



 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState)
    const dispatch = useDispatch();
   const logoutHandler = () =>{
             dispatch(logout);
   }
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item className='text-danger' onClick={logoutHandler}>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header


///Show user Profile

Profile option theriyaramathiri Header Component Set Panrom
//components/layouts/Header.js
import React from 'react';
import Search from './Search';
import { Link, useNavigate } from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import {Dropdown,Image} from 'react-bootstrap';
import { logout } from '../../actions/userActions';



 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState)
    const dispatch = useDispatch();
    const navigate = useNavigate();
   const logoutHandler = () =>{
             dispatch(logout);
   }
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item className='text-danger' onClick={()=>{navigate('/myprofile')}}>Profile</Dropdown.Item>
                    <Dropdown.Item className='text-danger' onClick={logoutHandler}>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
        <span id="cart" className="ml-3">Cart</span>
        <span className="ml-1" id="cart_count">2</span>
      </div>
    </nav>
  
  )
}
export default Header


///Profile Component Uruvakurom

//components/user/Profile.js
import React from 'react'
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';



const Profile = () => {
    const {user} = useSelector(state=>state.authState)
  return (
    <div className="row justify-content-around mt-5 user-info">
    <div className="col-12 col-md-3">
        <figure className='avatar avatar-profile'>
            <img className="rounded-circle img-fluid" src={user.avatar??'default_avatar.png'} alt='profile' />
        </figure>
        <Link id="edit_profile" className="btn btn-primary btn-block my-5">
            Edit Profile
        </Link> 
    </div>

    <div className="col-12 col-md-5">
         <h4>Full Name</h4>
         <p>{user.name}</p>

         <h4>Email Address</h4>
         <p>{user.email}</p>

         <h4>Joined</h4>
         <p>{String(user.createdAt).substring(0,10)}</p>

         <Link className="btn btn-danger btn-block mt-5">
            My Orders
        </Link>

        <Link className="btn btn-primary btn-block mt-3">
            Change Password
        </Link>
    </div>
</div>
  )
}

export default Profile;


Steps:
Craeting Protected Route
protected route na login panni irundha mattum than acces panna mudiyum

step 1:
//components/route/ProtectedRoute.js

import { useSelector } from 'react-redux';
import {Navigate} from 'react-router-dom';


export default function ProtectedRoute ({children}) {
    const { isAuthenticated} = useSelector(state => state.authState)

    if(!isAuthenticated) {
        return <Navigate to="/login" />
    }

   
        return children;
    }

step 2:
///App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect} from "react";
import Profile from "./components/user/Profile";
import ProtectedRoute from "./components/route/ProtectedRoute";



function App() {

  useEffect(()=>{
    store.dispatch(loadUser)
  })
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/myprofile" element={<ProtectedRoute><Profile /></ProtectedRoute>} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


///create Update Profile Reducers & Action

step 1:

//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticated: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        loadUserRequest(state,action){
            return {
                ...state,
                 isAuthenticated: false,
                loading: true 
            }
        },
        loadUserSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
       loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        logoutSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: false,
                
            }
        },
       logoutFail(state,action){
            return{
                ...state, 
                error: action.payload
            }
        },
        updateProfileRequest(state,action){
            return {
                ...state,
                loading: true, 
                isUpdated: false
            }
        },
        updateProfileSuccess(state,action){
            return{
                ...state,
                loading: false,
                user:action.payload.user,
                isUpdated: true
            }
        },
        updateProfileFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail,
    loadUserRequest,
    loadUserSuccess,
    loadUserFail,
    logoutFail,
    logoutSuccess,
    updateProfileFail,
    updateProfileRequest,
    updateProfileSuccess
} = actions;

export default reducer;


step 2:
//src/actions/userActions.js

export const updateProfile = (userData) => async (dispatch) => {

      try {
            dispatch(updateProfileRequest())
            const config ={
                   headers:{
                        'Content-type':'multipart/form-data'
                   }
            }
            const {data} = await axios.put(`/api/v1/update`,userData,config)
            dispatch(updateProfileSuccess(data))
      }catch(error){
            dispatch(updateProfileFail(error.response.data.message))
      }
  }




////Craete make Update Profile Component

Step 1:

///src/components/user/UpdateProfile.js

import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { clearAuthError, updateProfile } from '../../actions/userActions';
import { toast } from 'react-toastify';




export default function UpdateProfile() {
    const { loading, error, user, isUpdated } = useSelector(state => state.authState);
    const [name,setName]= useState("");
    const [email,setEmail]= useState("");
    const [avatar,setAvatar]= useState("");
    const [avatarPreview,setAvatarPreview]= useState("/images/default_avatar.png");
    const dispatch = useDispatch();

    const onChangeAvatar = (e) =>{
        const reader = new FileReader();
      reader.onload = () => {
        if (reader.readyState === 2) {
          setAvatarPreview(reader.result);
          setAvatar(e.target.files[0]);
        }
      };

      reader.readAsDataURL(e.target.files[0]);
    
    }

 const submitHandler  = (e) =>{
    e.preventDefault();
    const formData = new FormData();
    formData.append("name", name);
    formData.append("email", email);
    formData.append("avatar", avatar);
    dispatch(updateProfile(formData));
 }

 useEffect(()=>{
    if(user){
        setName(user.name);
        setEmail(user.email);
        if(user.avatar){
            setAvatarPreview(user.avatar)
        }
    }
    if(isUpdated){
        toast('profile updated succesfully',{
            type: 'success',
            possition: "bottom-center"

        })
        return;
    }
    if (error) {
        toast(error, {
          position: "bottom-center",
          type: "error",
          onOpen: () => {
            dispatch(clearAuthError);
          },
        });
        return;
      }
 },[user, isUpdated, error])

  return (
    <div className="row wrapper">
    <div className="col-10 col-lg-5">
        <form onSubmit={submitHandler} className="shadow-lg" encType='multipart/form-data'>
            <h1 className="mt-2 mb-5">Update Profile</h1>

            <div className="form-group">
                <label htmlFor="email_field">Name</label>
                <input 
                    type="name" 
                    id="name_field" 
                    className="form-control"
                    name='name'
                    value={name}
                    onChange={e=>setName(e.target.value)}
                />
            </div>

            <div className="form-group">
                <label htmlFor="email_field">Email</label>
                <input
                    type="email"
                    id="email_field"
                    className="form-control"
                    value={email}
                    onChange={e=>setEmail(e.target.value)}
                />
            </div>

            <div className='form-group'>
                <label htmlFor='avatar_upload'>Avatar</label>
                <div className='d-flex align-items-center'>
                    <div>
                        <figure className='avatar mr-3 item-rtl'>
                            <img
                                src={avatarPreview}
                                className='rounded-circle'
                                alt='Avatar Preview'
                            />
                        </figure>
                    </div>
                    <div className='custom-file'>
                        <input
                            type='file'
                            name='avatar'
                            className='custom-file-input'
                            id='customFile'
                            onChange={onChangeAvatar}
                        />
                        <label className='custom-file-label' htmlFor='customFile'>
                            Choose Avatar
                    </label>
                    </div>
                </div>
            </div>

            <button type="submit" className="btn update-btn btn-block mt-4 mb-3" >Update</button>
        </form>
    </div>
</div>
  )
}

Step 2:

Register Component ku Panna Mathiriyae Update Component kum Backend la code change panni eluthanum\

Step 1:
backend/controllers/authController.js
//Update Profile -/api/v1/update
exports.updateProfile = catchAsyncError(async (req, res, next) =>{
   let  newUserData ={
        name: req.body.name,
        email:req.body.email
    }

    let avatar;
    if(req.file){
      avatar = `${process.env.BACKEND_URL}/uploads/user/${req.file.originalname}`
      newUserData = {...newUserData, avatar}
    }

    const user = await User.findByIdAndUpdate(req.user.id,newUserData,{
        new: true,
        runValidators: true,
    })
    res.status(200).json({
        success: true,
        user
    })
})

step 2:
//backend/routes/auth.js
const express = require('express');
const multer = require('multer');
const path = require('path')

const upload = multer({storage: multer.diskStorage({
    destination: function(req, file, cb){
        cb(null,path.join(__dirname, '..', 'uploads/user'))
    },
    filename: function(req, file, cb){
        cb(null,file.originalname)
    }
})})

const { registerUser, loginUser, logoutUser, forgotPassword, resetPassword, getUserProfile, changePassword, updateProfile, getAllUsers, getUser, updateUser, deleteUser} = require('../controllers/authController');

const router = express.Router();
const {isAuthenticatedUser, authorizeRoles} = require('../middlewares/authenticate');

router.route('/register').post(upload.single('avatar'),registerUser);
router.route('/login').post(loginUser);
router.route('/logout').get(logoutUser);
router.route('/password/forgot').post(forgotPassword);
router.route('/password/reset/:token').post(resetPassword);
router.route('/password/change').put(isAuthenticatedUser, changePassword);
router.route('/myprofile').get(isAuthenticatedUser, getUserProfile);
1.router.route('/update').put(isAuthenticatedUser,upload.single('avatar'), updateProfile);


//Admin routes

router.route('/admin/users').get(isAuthenticatedUser, authorizeRoles('admin'), getAllUsers);
router.route('/admin/user/:id').get(isAuthenticatedUser, authorizeRoles('admin'), getUser)
                               .put(isAuthenticatedUser, authorizeRoles('admin'), updateUser)
                               .delete(isAuthenticatedUser, authorizeRoles('admin'), deleteUser);







module.exports = router;  

// Profile Update Succefully Completed


////Update Password Reducer and actions

//src/slices/authSlice.js

import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticated: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        loadUserRequest(state,action){
            return {
                ...state,
                 isAuthenticated: false,
                loading: true 
            }
        },
        loadUserSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
       loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        logoutSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: false,
                
            }
        },
       logoutFail(state,action){
            return{
                ...state, 
                error: action.payload
            }
        },
        updateProfileRequest(state,action){
            return {
                ...state,
                loading: true, 
                isUpdated: false
            }
        },
        updateProfileSuccess(state,action){
            return{
                ...state,
                loading: false,
                user:action.payload.user,
                isUpdated: true
            }
        },
        updateProfileFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        updatePasswordRequest(state,action){
            return {
                ...state,
                loading: true, 
                isUpdated: false
            }
        },
        updatePasswordSuccess(state,action){
            return{
                ...state,
                loading: false,
                isUpdated: true
            }
        },
        updatePasswordFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail,
    loadUserRequest,
    loadUserSuccess,
    loadUserFail,
    logoutFail,
    logoutSuccess,
    updateProfileFail,
    updateProfileRequest,
    updateProfileSuccess,
    updatePasswordRequest,
    updatePasswordSuccess,
    updatePasswordFail
} = actions;

export default reducer;

step 2:
//actions/userActions.js
   export const updatePassword = (formData) => async (dispatch) => {

      try {
          dispatch(updatePasswordRequest())
          const config = {
              headers: {
                  'Content-type': 'application/json'
              }
          }
          await axios.put(`/api/v1/password/change`, formData, config);
          dispatch(updatePasswordSuccess())
      } catch (error) {
          dispatch(updatePasswordFail(error.response.data.message))
      }
  
  }


step 3:

//src/components/usr/UpdatePassword.js


import {useEffect, useState } from 'react';
import { updatePassword as updatePasswordAction, clearAuthError } from '../../actions/userActions';
import {useDispatch, useSelector} from 'react-redux';
import { toast } from 'react-toastify';

export default function UpdatePassword() {
    
    const [password, setPassword] = useState("");
    const [oldPassword, setOldPassword] = useState("");
    const dispatch = useDispatch();
    const { isUpdated, error } = useSelector(state => state.authState)

    const submitHandler = (e) => {
        e.preventDefault();
        const formData = new FormData();
        formData.append('oldPassword', oldPassword);
        formData.append('password', password);
        dispatch(updatePasswordAction(formData))
    }

    useEffect(() => {
        if(isUpdated) {
            toast('Password updated successfully',{
                type: 'success',
                possition: "bottom-center"
            })
            setOldPassword("");
            setPassword("")
            return;
        }
        if(error)  {
            toast(error, {
                possition: "bottom-center",
                type: 'error',
                onOpen: ()=> { dispatch(clearAuthError) }
            })
            return
        }
    },[isUpdated, error, dispatch])

    return (
        <div className="row wrapper">
            <div className="col-10 col-lg-5">
                <form onSubmit={submitHandler} className="shadow-lg">
                    <h1 className="mt-2 mb-5">Update Password</h1>
                    <div className="form-group">
                        <label htmlFor="old_password_field">Old Password</label>
                        <input
                            type="password"
                            id="old_password_field"
                            className="form-control"
                            value={oldPassword}
                            onChange={e=>setOldPassword(e.target.value)}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="new_password_field">New Password</label>
                        <input
                            type="password"
                            id="new_password_field"
                            className="form-control"
                            value={password}
                            onChange={e=>setPassword(e.target.value)}
                        />
                    </div>

                    <button type="submit" className="btn update-btn btn-block mt-4 mb-3">Update Password</button>
                </form>
            </div>
        </div>
    )
}


////steps:
Forgot & Reset Password Component


Forgot & Reset Password Component Slices

//src/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: false,
        isAuthenticated: false
    },
    reducers:{
        loginRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        loginSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        clearError(state,action){
            return{
                ...state, 
                error: null
            }
        },
        registerRequest(state,action){
            return {
                ...state,
                loading: true, 
            }
        },
        registerSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        loadUserRequest(state,action){
            return {
                ...state,
                 isAuthenticated: false,
                loading: true 
            }
        },
        loadUserSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: true,
                user:action.payload.user
            }
        },
       loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        logoutSuccess(state,action){
            return{
                loading: false,
                isAuthenticated: false,
                
            }
        },
       logoutFail(state,action){
            return{
                ...state, 
                error: action.payload
            }
        },
        updateProfileRequest(state,action){
            return {
                ...state,
                loading: true, 
                isUpdated: false
            }
        },
        updateProfileSuccess(state,action){
            return{
                ...state,
                loading: false,
                user:action.payload.user,
                isUpdated: true
            }
        },
        updateProfileFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        updatePasswordRequest(state,action){
            return {
                ...state,
                loading: true, 
                isUpdated: false
            }
        },
        updatePasswordSuccess(state,action){
            return{
                ...state,
                loading: false,
                isUpdated: true
            }
        },
        updatePasswordFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        forgotPasswordRequest(state,action){
            return {
                ...state,
                loading: true, 
                message:null
            }
        },
        forgotPasswordSuccess(state,action){
            return{
                ...state,
                loading: false,
                message:action.payload.message
            }
        },
        forgotPasswordFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        },
        resetPasswordRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
        resetPasswordSuccess(state,action){
            return{
                ...state,
                loading: false,
                isAuthenticated: true,
                user: action.payload.user
            }
        },
        resetPasswordFail(state,action){
            return{
                ...state, 
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= authSlice;

export const {
    loginRequest,
    loginSuccess,
    loginFail, 
    clearError,
    registerRequest,
    registerSuccess,
    registerFail,
    loadUserRequest,
    loadUserSuccess,
    loadUserFail,
    logoutFail,
    logoutSuccess,
    updateProfileFail,
    updateProfileRequest,
    updateProfileSuccess,
    updatePasswordRequest,
    updatePasswordSuccess,
    updatePasswordFail,
    forgotPasswordRequest,
    forgotPasswordFail,
    forgotPasswordSuccess,
    resetPasswordFail,
    resetPasswordRequest,
    resetPasswordSuccess
} = actions;

export default reducer;


step 2:
Forgot And Reset Component Action Creation

//src/actions/userActions.js

export const forgotPassword = (formData) => async (dispatch) => {

      try {
          dispatch(forgotPasswordRequest())
          const config = {
              headers: {
                  'Content-type': 'application/json'
              }
          }
         const {data}= await axios.post(`/api/v1/password/forgot`, formData, config);
          dispatch(forgotPasswordSuccess(data))
      } catch (error) {
          dispatch(forgotPasswordFail(error.response.data.message))
      }
  
  }

  export const resetPassword = (formData,token) => async (dispatch) => {

      try {
          dispatch(resetPasswordRequest())
          const config = {
              headers: {
                  'Content-type': 'application/json'
              }
          }
        const {data} =  await axios.post(`/api/v1/password/reset/${token}`, formData, config);
          dispatch(resetPasswordSuccess(data))
      } catch (error) {
          dispatch(resetPasswordFail(error.response.data.message))
      }
  
  }


step 3:
Forgot Component Created

//components/user/ForgotPassword.js
import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { forgotPassword,clearAuthError } from "../../actions/userActions";


export default function ForgotPassword() {
         
    const [email,setEmail] = useState("");
    const dispatch = useDispatch();
    const {error,message} = useSelector(state=>state.authState);

    const submitHandler = (e) =>{
        e.preventDefault();
        const formData = new FormData();
        formData.append('email',email);
        dispatch(forgotPassword(formData))
    }

    useEffect(()=>{
        if(message) {
            toast(message, {
                type: 'success',
                position: 'bottom-center'
            })
            setEmail("");
            return;
        }

        if(error)  {
            toast(error, {
                position: 'bottom-center',
                type: 'error',
                onOpen: ()=> { dispatch(clearAuthError) }
            })
            return
        }
    }, [message, error, dispatch])
           


  return (
    <div className="row wrapper">
    <div className="col-10 col-lg-5">
        <form onSubmit={submitHandler} className="shadow-lg">
            <h1 className="mb-3">Forgot Password</h1>
            <div className="form-group">
                <label htmlFor="email_field">Enter Email</label>
                <input
                    type="email"
                    id="email_field"
                    className="form-control"
                    value={email}
                    onChange={e=>setEmail(e.target.value)}
                />
            </div>

            <button
                id="forgot_password_button"
                type="submit"
                className="btn btn-block py-3">
                Send Email
        </button>

        </form>
    </div>
</div>
  )
}


//App.js la route Link Kudukanum

import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect} from "react";
import Profile from "./components/user/Profile";
import ProtectedRoute from "./components/route/ProtectedRoute";
import UpdateProfile from "./components/user/UpdateProfile";
import UpdatePassword from "./components/user/UpdatePassword";
import ForgotPassword from "./components/user/ForgotPassword";



function App() {

  useEffect(()=>{
    store.dispatch(loadUser)
  })
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/myprofile" element={<ProtectedRoute><Profile /></ProtectedRoute>} />
          <Route path="/myprofile/update" element={<ProtectedRoute><UpdateProfile /></ProtectedRoute>} />
          <Route path="/myprofile/update/password" element={<ProtectedRoute><UpdatePassword /></ProtectedRoute>} />
          <Route path="/password/forgot" element={<ForgotPassword />} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


step 3:
//Login.js

Link Kudukanum
 <Link to='/password/forgot' className="float-right mb-4">
                forgot Password?
                </Link>


step 4:
//Frontend thaguntha mathiri Url Backend set pannikanum appo than mail anupumbothu password frontend thaguntha mathiri pogum
Backend/config/config.env
PORT = 8000
NODE_ENV = development
DB_LOCAL_URI = mongodb://127.0.0.1:27017/shoppy
JWT_SECRET=6CCLCx5uDJ
JWT_EXPIRES_TIME=7d
COOKIE_EXPIRES_TIME=7
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=dd9dab8137ca1d
SMTP_PASS=100a7d1168dff3
SMTP_FROM_NAME=shoppy
SMTP_FROM_EMAIL=noreply@jvlcart.com
BACKEND_URL=http://127.0.0.1:8000
FRONTEND_URL=http://127.0.0.1:3000



step 5:
//backend/controllers/authController.js
//Forgot Password
//Forgot Password - /api/v1/password/forgot
exports.forgotPassword = catchAsyncError( async (req, res, next)=>{
   const user = await User.findOne({email: req.body.email});

   if(!user){
    return next(new ErrorHandler('User not found with this email',404))
   }

   const resetToken = user.getResetToken();

   await user.save({validateBeforeSave: false})

   //Create reset url
   const resetUrl = `${process.env.FRONTEND_URL}/password/reset/${resetToken}`;

   const message = `Your password reset url is as follows \n\n
   ${resetUrl}\n\n If you have not requested this email, then ignore it.`

   try{
         sendEmail({
              email:user.email,
              subject:"shoppy password Recovery",
              message
         })
         res.status(200).json({
            success: true,
            message:`Email sent to ${user.email}`
         })
   }catch(error){
    user.resetPasswordToken = undefined;
    user.resetPasswordTokenExpire = undefined;
    await user.save({validateBeforeSave: false});
     return next(new ErrorHandler(error.message),500)
   }
})

////ResetPassword Component

//components/user/ResetPassword.js
import { useEffect, useState} from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { resetPassword, clearAuthError } from '../../actions/userActions';
import {useNavigate, useParams} from 'react-router-dom';
import { toast } from 'react-toastify';

export default function ResetPassword() {
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const dispatch = useDispatch();
    const { isAuthenticated, error }  = useSelector(state => state.authState)
    const navigate = useNavigate();
    const { token } = useParams(); // (url la irundhu endha datava venalum eduthukalam)

    const submitHandler  = (e) => {
        e.preventDefault();
        const formData = new FormData();
        formData.append('password', password);
        formData.append('confirmPassword', confirmPassword);
        
        dispatch(resetPassword(formData, token))
    }

    useEffect(()=> {
        if(isAuthenticated) {
            toast('Password Reset Success!', {
                type: 'success',
                possition: "bottom-center"
            })
            navigate('/')
            return;
        }
        if(error)  {
            toast(error, {
                possition: "bottom-center",
                type: 'error',
                onOpen: ()=> { dispatch(clearAuthError) }
            })
            return
        }
    },[isAuthenticated, error, dispatch, navigate])

    return (
        <div className="row wrapper">
            <div className="col-10 col-lg-5">
                <form onSubmit={submitHandler} className="shadow-lg">
                    <h1 className="mb-3">New Password</h1>

                    <div className="form-group">
                        <label htmlFor="password_field">Password</label>
                        <input
                            type="password"
                            id="password_field"
                            className="form-control"
                            value={password}
                            onChange={e => setPassword(e.target.value)}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="confirm_password_field">Confirm Password</label>
                        <input
                            type="password"
                            id="confirm_password_field"
                            className="form-control"
                            value={confirmPassword}
                            onChange={e => setConfirmPassword(e.target.value)}
                        />
                    </div>

                    <button
                        id="new_password_button"
                        type="submit"
                        className="btn btn-block py-3">
                        Set Password
                    </button>

                </form>
            </div>
        </div>
    )
}


step 2:
Route Set Pannanum

<Route path="/password/reset/:token" element={<ResetPassword />} />


////Handle Cart & Payment

Handle Quantity
Checkout Steps
Handle Shipping Information
Confirm Order Details
Stripe FrontEnd And Backend Integration
Handle Payment Process
Create New Order


Small Correction of the App myprofile page ahh browser la direct ahh run pannuna varathu athuku below instruction follow pannuna correct ahh vanthidum

step 1:
//components/slices/authSlice.js
const authSlice = createSlice({
    name: 'auth',
    initialState:{
        loading: true,(Loading False ahh irunthatha ippo true ahh mathitom)
        isAuthenticated: false
    },

Step 2:
components/route/ProtectedRoute.js
import { useSelector } from 'react-redux';
import {Navigate} from 'react-router-dom';



export default function ProtectedRoute ({children}) {
    const { isAuthenticated,loading} = useSelector(state => state.authState)

    if(!isAuthenticated && !loading) {
        return <Navigate to="/login" />
    }

    if(isAuthenticated) {
        return children;
    }
    if(loading) {
        return <Loader/>
    }     
    }

step 3:
ulla error msg vangura code delete panniyachi
components/slices/authSlices.js
 loadUserFail(state,action){
            return{
                ...state, 
                loading: false,
                
            }



<a href="javascript;"/>

#value pathila indha mathiri kuduthukalam


step 4:
Profile Update Repeated Show agama irukirathuku
//src/components/slices/authSlice.js
 clearUpdateProfile(state,action){
            return{
                ...state, 
                isUpdated: false
            }
        },

//src/user/UpdateProfile.js
 if(isUpdated){
        toast('profile updated succesfully',{
            type: 'success',
            possition: "bottom-center",
            onOpen: () => {
                dispatch(clearUpdateProfile());
              },

        })



/////Handle Quantity Selection
Increase and Decrease Quantity
step 1:
src/components/product/ProductDetail.js
import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useParams } from 'react-router-dom';
import { getProduct } from '../../actions/productActions';
import Loader from '../layouts/Loader';
import {Carousel} from 'react-bootstrap';
import MetaData from "../layouts/MetaData"


const ProductDetail = () => {

   const {loading, product} = useSelector((state)=>state.productState)
    const dispatch = useDispatch();
    const {id} = useParams()
    const [quantity,setQuantity]=useState(1);

   1. const increaseQty =()=>{
    const count = document.querySelector('.count')
    if(product.stock ===  0 || count.valueAsNumber >= product.stock) return;
    const qty = count.valueAsNumber + 1;
    setQuantity(qty);
    }

   2.  const decreaseQty =()=>{
    const count = document.querySelector('.count')
    if(count.valueAsNumber === 1) return;
    const qty = count.valueAsNumber - 1;
    setQuantity(qty);
    }
 
    useEffect(()=>{
        dispatch(getProduct(id))
    },[dispatch,id])
  return (
    <>
    {loading? <Loader/>:
    <>
    <MetaData title={product.name}/>
    <div className="row f-flex justify-content-around">
    <div className="col-12 col-lg-5 img-fluid" id="product_image">
        <Carousel pause="hover">
            {product.images && product.images.map(image =>
                <Carousel.Item key={image._id}>
 <img className="d-block w-100" src={image.image} alt={product.name} height="500" width="500" />
                </Carousel.Item>)}
       
        </Carousel>
    </div>

    <div className="col-12 col-lg-5 mt-5">
        <h3>{product.name}</h3>
        <p id="product_id">Product # {product._id}</p>

        <hr/>

        <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
        </div>
        <span id="no_of_reviews">({product.numOfReviews})</span>

        <hr/>

        <p id="product_price">${product.price}</p>
        <div className="stockCounter d-inline">
            1.<span className="btn btn-danger minus" onClick={decreaseQty} >-</span>

            <input type="number" className="form-control count d-inline" value={quantity} readOnly />

           2 . <span className="btn btn-primary plus" onClick={increaseQty}>+</span>
        </div>
         <button type="button" id="cart_btn" disabled={product.stock === 0?true:false} className="btn btn-primary d-inline ml-4">Add to Cart</button>

        <hr/>

        <p>Status: <span id="stock_status" className={product.stock > 0 ?'greenColor':'redColor'}>{product.stock > 0 ?'In Stock':'Out Of Stock'}</span></p>

        <hr/>

        <h4 className="mt-2">Description:</h4>
        <p>{product.description}</p>
        <hr/>
        <p id="product_seller mb-3">Sold by: <strong>{product.seller}</strong></p>
        
        <button id="review_btn" type="button" className="btn btn-primary mt-4" data-toggle="modal" data-target="#ratingModal">
                    Submit Your Review
        </button>
        
        <div className="row mt-2 mb-5">
            <div className="rating w-50">

                <div className="modal fade" id="ratingModal" tabIndex="-1" role="dialog" aria-labelledby="ratingModalLabel" aria-hidden="true">
                    <div className="modal-dialog" role="document">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title" id="ratingModalLabel">Submit Review</h5>
                                <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div className="modal-body">

                                <ul className="stars" >
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                </ul>

                                <textarea name="review" id="review" className="form-control mt-3">

                                </textarea>

                                <button className="btn my-3 float-right review-btn px-4 text-white" data-dismiss="modal" aria-label="Close">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
                
    </div>

</div>

</div>
</>}
</>
  )
}

export default ProductDetail


///AddtoCard Button

Reducer and Action Uruvakkuvom

//components/Slices/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";


const cartSlice = createSlice({
    name: 'cart',
    initialState: {
        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],
        loading: false,
       
    },
    reducers: {
        addCartItemRequest(state, action){
            return {
                ...state,
                loading: true
            }
        },
        addCartItemSuccess(state, action){
            const item = action.payload

            const isItemExist = state.items.find( i => i.product == item.product);
            
            if(isItemExist) {
                state = {
                    ...state,
                    loading: false,
                }
            }else{
                state = {
                    items: [...state.items, item],
                    loading: false
                }
                
                localStorage.setItem('cartItems', JSON.stringify(state.items));
            }
            return state
            
        }
    }
    });

    const { actions, reducer } = cartSlice;

    export const { 
        addCartItemRequest, 
        addCartItemSuccess
       
      
       
     } = actions;
    
    export default reducer;

step 2: 
//src/action/cartAction.js
import { createSlice } from "@reduxjs/toolkit";


const cartSlice = createSlice({
    name: 'cart',
    initialState: {
        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],
        loading: false,
       
    },
    reducers: {
        addCartItemRequest(state, action){
            return {
                ...state,
                loading: true
            }
        },
        addCartItemSuccess(state, action){
            const item = action.payload

            const isItemExist = state.items.find( i => i.product == item.product);
            
            if(isItemExist) {
                state = {
                    ...state,
                    loading: false,
                }
            }else{
                state = {
                    items: [...state.items, item],
                    loading: false
                }
                
                localStorage.setItem('cartItems', JSON.stringify(state.items));
            }
            return state
            
        }
    }
    });

    const { actions, reducer } = cartSlice;

    export const { 
        addCartItemRequest, 
        addCartItemSuccess
       
      
       
     } = actions;
    
    export default reducer;


step 3:
//src/store.js
import {combineReducers, configureStore} from "@reduxjs/toolkit";
import {thunk} from "redux-thunk";
import productsReducer from "./slices/productsSlice";
import productReducer from "./slices/productSlice";
import authReducer from "./slices/authSlice";
import cartReducer from "./slices/cartSlice"
     

const reducer = combineReducers({
    productsState: productsReducer,
    productState: productReducer ,
    authState: authReducer,
    cartState: cartReducer
    
})
 

const store = configureStore({ 
    reducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)
    // middleware:[thunk]
})

export default store;

step 4:
 
//components/product/productDetail.js

import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useParams } from 'react-router-dom';
import { getProduct } from '../../actions/productActions';
import Loader from '../layouts/Loader';
import {Carousel} from 'react-bootstrap';
import MetaData from "../layouts/MetaData"
import { addCartItem } from '../../actions/cartActions';


const ProductDetail = () => {

   const {loading, product} = useSelector((state)=>state.productState)
    const dispatch = useDispatch();
    const {id} = useParams()
    const [quantity,setQuantity]=useState(1);

    const increaseQty =()=>{
    const count = document.querySelector('.count')
    if(product.stock ===  0 || count.valueAsNumber >= product.stock) return;
    const qty = count.valueAsNumber + 1;
    setQuantity(qty);
    }

     const decreaseQty =()=>{ 
    const count = document.querySelector('.count')
    if(count.valueAsNumber === 1) return;
    const qty = count.valueAsNumber - 1;
    setQuantity(qty);
    }
 
    useEffect(()=>{
        dispatch(getProduct(id))
    },[dispatch,id])
  return (
    <>
    {loading? <Loader/>:
    <>
    <MetaData title={product.name}/>
    <div className="row f-flex justify-content-around">
    <div className="col-12 col-lg-5 img-fluid" id="product_image">
        <Carousel pause="hover">
            {product.images && product.images.map(image =>
                <Carousel.Item key={image._id}>
 <img className="d-block w-100" src={image.image} alt={product.name} height="500" width="500" />
                </Carousel.Item>)}
       
        </Carousel>
    </div>

    <div className="col-12 col-lg-5 mt-5">
        <h3>{product.name}</h3>
        <p id="product_id">Product # {product._id}</p>

        <hr/>

        <div className="rating-outer">
            <div className="rating-inner" style={{width:`${product.ratings/ 5 * 100}%`}}></div>
        </div>
        <span id="no_of_reviews">({product.numOfReviews})</span>

        <hr/>

        <p id="product_price">${product.price}</p>
        <div className="stockCounter d-inline">
            <span className="btn btn-danger minus" onClick={decreaseQty} >-</span>

            <input type="number" className="form-control count d-inline" value={quantity} readOnly />

            <span className="btn btn-primary plus" onClick={increaseQty}>+</span>
        </div>
         <button type="button" id="cart_btn"
          disabled={product.stock === 0?true:false}
           className="btn btn-primary d-inline ml-4"
           1.onClick={()=>{
            dispatch(addCartItem(product._id, quantity))
           }}
           >Add to Cart</button>

        <hr/>

        <p>Status: <span id="stock_status" className={product.stock > 0 ?'greenColor':'redColor'}>{product.stock > 0 ?'In Stock':'Out Of Stock'}</span></p>

        <hr/>

        <h4 className="mt-2">Description:</h4>
        <p>{product.description}</p>
        <hr/>
        <p id="product_seller mb-3">Sold by: <strong>{product.seller}</strong></p>
        
        <button id="review_btn" type="button" className="btn btn-primary mt-4" data-toggle="modal" data-target="#ratingModal">
                    Submit Your Review
        </button>
        
        <div className="row mt-2 mb-5">
            <div className="rating w-50">

                <div className="modal fade" id="ratingModal" tabIndex="-1" role="dialog" aria-labelledby="ratingModalLabel" aria-hidden="true">
                    <div className="modal-dialog" role="document">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title" id="ratingModalLabel">Submit Review</h5>
                                <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div className="modal-body">

                                <ul className="stars" >
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                    <li className="star"><i className="fa fa-star"></i></li>
                                </ul>

                                <textarea name="review" id="review" className="form-control mt-3">

                                </textarea>

                                <button className="btn my-3 float-right review-btn px-4 text-white" data-dismiss="modal" aria-label="Close">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
                
    </div>

</div>

</div>
</>}
</>
  )
}

export default ProductDetail

//Header la card item add panra numbers ahh katrom




///components/layout/Header.js
import React from 'react';
import Search from './Search';
import { Link, useNavigate } from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import {Dropdown,Image} from 'react-bootstrap';
import { logout } from '../../actions/userActions';



 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState);
  1. const {items:cartItems}=useSelector(state => state.cartState);
    const dispatch = useDispatch();
    const navigate = useNavigate();
   const logoutHandler = () =>{
             dispatch(logout);
   }
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item className='text-danger' onClick={()=>{navigate('/myprofile')}}>Profile</Dropdown.Item>
                    <Dropdown.Item className='text-danger' onClick={logoutHandler}>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
       <span id="cart" className="ml-3">Cart</span>
      3.  <span className="ml-1" id="cart_count">{cartItems.length}</span>
      </div>
    </nav>
  
  )
}
export default Header


//Normal Cart Component Uruvakanum AddtoComponent content ithu Header la Link Kudukarathukaga


Step 1:
//components/cart/Cart.js
import {Fragment} from 'react'
export default function Cart(){
    return (
        <Fragment>
        <h2 className="mt-5">Your Cart: <b>2 items</b></h2>
        
        <div className="row d-flex justify-content-between">
            <div className="col-12 col-lg-8">
                <hr />
                <div className="cart-item">
                    <div className="row">
                        <div className="col-4 col-lg-3">
                            <img src="./images/products/1.jpg" alt="Laptop" height="90" width="115" />
                        </div>

                        <div className="col-5 col-lg-3">
                            <a href="javascript.">OPPO F21s Pro 5G (Dawnlight Gold, 8GB RAM, 128 Storage) with No Cost EMI/Additional Exchange Offers</a>
                        </div>


                        <div className="col-4 col-lg-2 mt-4 mt-lg-0">
                            <p id="card_item_price">$245.67</p>
                        </div>

                        <div className="col-4 col-lg-3 mt-4 mt-lg-0">
                            <div className="stockCounter d-inline">
                                <span className="btn btn-danger minus">-</span>
                                <input type="number" className="form-control count d-inline" value="1" readOnly />

								<span className="btn btn-primary plus">+</span>
                            </div>
                        </div>

                        <div className="col-4 col-lg-1 mt-4 mt-lg-0">
                            <i id="delete_cart_item" className="fa fa-trash btn btn-danger"></i>
                        </div>

                    </div>
                </div>
                <hr />
            </div>

            <div className="col-12 col-lg-3 my-4">
                <div id="order_summary">
                    <h4>Order Summary</h4>
                    <hr />
                    <p>Subtotal:  <span className="order-summary-values">1 (Units)</span></p>
                    <p>Est. total: <span className="order-summary-values">$245.67</span></p>
    
                    <hr />
                    <button id="checkout_btn" className="btn btn-primary btn-block">Check out</button>
                </div>
            </div>
        </div>
        </Fragment>
    )
}

//step 2:

//components/layouts/Header.js

///components/layout/Header.js
import React from 'react';
import Search from './Search';
import { Link, useNavigate } from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import {Dropdown,Image} from 'react-bootstrap';
import { logout } from '../../actions/userActions';



 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState);
  1. const {items:cartItems}=useSelector(state => state.cartState);
    const dispatch = useDispatch();
    const navigate = useNavigate();
   const logoutHandler = () =>{
             dispatch(logout);
   }
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
                    <Dropdown.Item className='text-danger' onClick={()=>{navigate('/myprofile')}}>Profile</Dropdown.Item>
                    <Dropdown.Item className='text-danger' onClick={logoutHandler}>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
        2. <Link to='/cart'><span id="cart" className="ml-3">Cart</span></Link>
        <span className="ml-1" id="cart_count">{cartItems.length}</span>
      </div>
    </nav>
  
  )
}
export default Header

step 3:

//step 1:
// App.js la route set panrom
import Cart from "./components/cart/Cart";
<Route path="/cart" element={<Cart />} />






////Add to card kudukumpothu athu poi cart la store agumla andha component uruvakka porom
///Also Handle Quantity in Cart Component
//Also Handle Cart Summary


//reduce function is used to array values total ahh orey value matharathuku uthavum

//acc na accelamatry value Loop mudinja Piragu Enna value varutho athu than accelamatry value

//step 1:

//components/slices/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";



const cartSlice = createSlice({
    name: 'cart',
    initialState: {
        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],
        loading: false,
        
    },
    reducers: {
        addCartItemRequest(state, action){
            return {
                ...state,
                loading: true
            }
        },
        addCartItemSuccess(state, action){
            const item = action.payload

            const isItemExist = state.items.find( i => i.product === item.product);
            
            if(isItemExist) {
                state = {
                    ...state,
                    loading: false,
                }
            }else{
                state = {
                    items: [...state.items, item],
                    loading: false
                }
                
                localStorage.setItem('cartItems', JSON.stringify(state.items));
            }
            return state
            
        },
        increaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity + 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        decreaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity - 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        removeItemFromCart(state, action) {
            const filterItems = state.items.filter(item => {
                return item.product !== action.payload
            })
            localStorage.setItem('cartItems', JSON.stringify(filterItems));
            return {
                ...state,
                items: filterItems
            }
        }
        

    }
});

const { actions, reducer } = cartSlice;

export const { 
    addCartItemRequest, 
    addCartItemSuccess,
    decreaseCartItemQty,
    increaseCartItemQty,
    removeItemFromCart,
   
 } = actions;

export default reducer;

step 2:
//components/cart/Cart.js
import {Fragment} from 'react';
import {useSelector,useDispatch} from 'react-redux';
import { Link} from 'react-router-dom';

import { decreaseCartItemQty, increaseCartItemQty,removeItemFromCart } from '../../slices/cartSlice';

export default function Cart(){
    const {items } = useSelector(state => state.cartState)
    const dispatch = useDispatch(); 

    const increaseQty = (item) => {
        const count = item.quantity;
        if(item.stock === 0 ||  count >= item.stock) return;
        dispatch(increaseCartItemQty(item.product))
    }
    const decreaseQty = (item) => {
        const count = item.quantity;
        if(count === 1) return;
        dispatch(decreaseCartItemQty(item.product))
    }

    return (
        <Fragment>
            {items.length===0 ? 
            <h2 className="mt-5">Your Cart is Empty</h2> :
            <Fragment>
            <h2 className="mt-5">Your Cart: <b>{items.length} items</b></h2>
            
            <div className="row d-flex justify-content-between">
                <div className="col-12 col-lg-8">
                    {items.map(item=> (
                        <Fragment>
                    <hr />
                    <div className="cart-item">
                        <div className="row">
                            <div className="col-4 col-lg-3">
                                <img src={item.image} alt={item.name} height="90" width="115" />
                            </div>
    
                            <div className="col-5 col-lg-3">
                                <Link to={`/product/${item.product}`}>{item.name}</Link>
                            </div>
    
    
                            <div className="col-4 col-lg-2 mt-4 mt-lg-0">
                                <p id="card_item_price">${item.price}</p>
                            </div>
    
                            <div className="col-4 col-lg-3 mt-4 mt-lg-0">
                                <div className="stockCounter d-inline">
                                    <span className="btn btn-danger minus" onClick={() => decreaseQty(item)}>-</span>
                                    <input type="number" className="form-control count d-inline" value={item.quantity} readOnly />
    
                                    <span className="btn btn-primary plus" onClick={() => increaseQty(item)}>+</span>
                                </div>
                            </div>
    
                            <div className="col-4 col-lg-1 mt-4 mt-lg-0">
                                <i id="delete_cart_item" onClick={()=>dispatch(removeItemFromCart(item.product))} className="fa fa-trash btn btn-danger"></i>
                            </div>
    
                        </div>
                    </div>  
                        </Fragment>
                        )
                    )
                        }
                   
                
                </div>
    
                <div className="col-12 col-lg-3 my-4">
                    <div id="order_summary">
                        <h4>Order Summary</h4>
                        <hr />
                        <p>Subtotal:  <span className="order-summary-values">{items.reduce((acc,item)=>(acc+item.quantity),0)} (Units)</span></p>
                        <p>Est. total: <span className="order-summary-values">${items.reduce((acc,item)=>(acc+item.quantity* item.price),0)}</span></p>
        
                        <hr />
                        <button id="checkout_btn" className="btn btn-primary btn-block">Check out</button>
                    </div>
                </div>
            </div>
            </Fragment>
        }
       
        </Fragment>
    )
}


////Shipping Component
npm i countries-list

checkout button click panna login pannalaina login page ku poganum
athumathiri panrathuku 

step 1:
checkHandler function uruvakrom

//components/cart/cart.js
import {Fragment} from 'react';
import {useSelector,useDispatch} from 'react-redux';
import { Link, useNavigate} from 'react-router-dom';

import { decreaseCartItemQty, increaseCartItemQty,removeItemFromCart } from '../../slices/cartSlice';

export default function Cart(){
    const {items } = useSelector(state => state.cartState)
    const dispatch = useDispatch(); 
    const navigate = useNavigate();

    const increaseQty = (item) => {
        const count = item.quantity;
        if(item.stock === 0 ||  count >= item.stock) return;
        dispatch(increaseCartItemQty(item.product))
    }
    const decreaseQty = (item) => {
        const count = item.quantity;
        if(count === 1) return;
        dispatch(decreaseCartItemQty(item.product))
    }

    const checkoutHandler =()=>{
        navigate('/login?redirect=shipping')
    }

    return (
        <Fragment>
            {items.length===0 ? 
            <h2 className="mt-5">Your Cart is Empty</h2> :
            <Fragment>
            <h2 className="mt-5">Your Cart: <b>{items.length} items</b></h2>
            
            <div className="row d-flex justify-content-between">
                <div className="col-12 col-lg-8">
                    {items.map(item=> (
                        <Fragment>
                    <hr />
                    <div className="cart-item">
                        <div className="row">
                            <div className="col-4 col-lg-3">
                                <img src={item.image} alt={item.name} height="90" width="115" />
                            </div>
    
                            <div className="col-5 col-lg-3">
                                <Link to={`/product/${item.product}`}>{item.name}</Link>
                            </div>
    
    
                            <div className="col-4 col-lg-2 mt-4 mt-lg-0">
                                <p id="card_item_price">${item.price}</p>
                            </div>
    
                            <div className="col-4 col-lg-3 mt-4 mt-lg-0">
                                <div className="stockCounter d-inline">
                                    <span className="btn btn-danger minus" onClick={() => decreaseQty(item)}>-</span>
                                    <input type="number" className="form-control count d-inline" value={item.quantity} readOnly />
    
                                    <span className="btn btn-primary plus" onClick={() => increaseQty(item)}>+</span>
                                </div>
                            </div>
    
                            <div className="col-4 col-lg-1 mt-4 mt-lg-0">
                                <i id="delete_cart_item" onClick={()=>dispatch(removeItemFromCart(item.product))} className="fa fa-trash btn btn-danger"></i>
                            </div>
    
                        </div>
                    </div>  
                        </Fragment>
                        )
                    )
                        }
                   
                
                </div>
    
                <div className="col-12 col-lg-3 my-4">
                    <div id="order_summary">
                        <h4>Order Summary</h4>
                        <hr />
                        <p>Subtotal:  <span className="order-summary-values">{items.reduce((acc,item)=>(acc+item.quantity),0)} (Units)</span></p>
                        <p>Est. total: <span className="order-summary-values">${items.reduce((acc,item)=>(acc+item.quantity* item.price),0)}</span></p>
        
                        <hr />
                        <button id="checkout_btn" className="btn btn-primary btn-block" onClick={checkoutHandler}>Check out</button>
                    </div>
                </div>
            </div>
            </Fragment>
        }
       
        </Fragment>
    )
}

step 2:
components/user/Login.js
    import React, {Fragment, useEffect, useState } from "react";
    import MetaData from '../layouts/MetaData'
    import {clearAuthError, login} from "../../actions/userActions"
    import { useDispatch, useSelector } from "react-redux";
    import {toast} from 'react-toastify'
    import { Link, useNavigate, useLocation } from 'react-router-dom';


    const Login = () => {

        const [email,setEmail]=useState("")
        const [password,setPassword]=useState("")
        const dispatch = useDispatch();
        const navigate = useNavigate();
        const location = useLocation();

        const {loading, error, isAuthenticated} = useSelector(state=>state.authState)
       1. const redirect = location.search?'/'+location.search.split('=')[1]:'/';

        
        const submitHandler = (e)=>{
            e.preventDefault();
        dispatch(login(email,password))
        
        }
        useEffect(() => {
            if(isAuthenticated) {
                navigate(redirect)
                return
            }

            if (error) {    
            toast(error, {
                position: "bottom-center",
                type: 'error',
                onOpen:() =>{
                    dispatch(clearAuthError)
                } 

            })
            return
            }
        }, [error,isAuthenticated, dispatch,navigate,redirect]);       

    return (
        <Fragment>
        <MetaData title={`Login`}/>
        <div className="row wrapper">
            <div className="col-10 col-lg-5">
            <form  onSubmit={submitHandler} className="shadow-lg">
                <h1 className="mb-3">Login</h1>
                <div className="form-group">
                <label htmlFor="email_field">Email</label>
                <input
                    type="email"
                    id="email_field"
                    className="form-control"
                    value={email}
                    onChange={e=> setEmail(e.target.value)}
                />
                </div>

                <div className="form-group">
                <label htmlFor="password_field">Password</label>
                <input
                    type="password"
                    id="password_field"
                    className="form-control"
                    value={password}
                    onChange={e=> setPassword(e.target.value)}
                />
                </div>

                <Link to='/password/forgot' className="float-right mb-4">
                forgot Password?
                </Link>

                <button id="login_button" type="submit" className="btn btn-block py-3" disabled={loading}>
                LOGIN
                </button>

                <Link to="/register" className="float-right mt-3">
                New User?
                </Link>
            </form>
            </div>
        </div>
        </Fragment>
    );
    };

    export default Login;


///Shipping Component


npm i countries-list

step 1:
//components/slices/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";



const cartSlice = createSlice({
    name: 'cart',
    initialState: {
        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],
        loading: false,
        shippingInfo: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('shippingInfo')): {}
    },
    reducers: {
        addCartItemRequest(state, action){
            return { 
                ...state,
                loading: true
            }
        },
        addCartItemSuccess(state, action){
            const item = action.payload

            const isItemExist = state.items.find( i => i.product === item.product);
            
            if(isItemExist) {
                state = {
                    ...state,
                    loading: false,
                }
            }else{
                state = {
                    items: [...state.items, item],
                    loading: false
                }
                
                localStorage.setItem('cartItems', JSON.stringify(state.items));
            }
            return state
            
        },
        increaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity + 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        decreaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity - 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        removeItemFromCart(state, action) {
            const filterItems = state.items.filter(item => {
                return item.product !== action.payload
            })
            localStorage.setItem('cartItems', JSON.stringify(filterItems));
            return {
                ...state,
                items: filterItems
            }
        },
      1.  saveShippingInfo(state,action){
            localStorage.setItem('shippingInfo', JSON.stringify(action.payload));
            return {
                ...state,
                shippingInfo:action.payload
            } 
        }
        

    }
});

const { actions, reducer } = cartSlice;

export const { 
    addCartItemRequest, 
    addCartItemSuccess,
    decreaseCartItemQty,
    increaseCartItemQty,
    removeItemFromCart,
    saveShippingInfo
   
 } = actions;

export default reducer;

step 2:
Route set Pannanum
App.js
  <Route path="/shipping" element={<ProtectedRoute><Shipping /></ProtectedRoute>} />

step 3:

Login Pannalaina Login Page u Pora mathiri checkout function uruvakkanum

//components/cart/cart.js
import {Fragment} from 'react';
import {useSelector,useDispatch} from 'react-redux';
import { Link, useNavigate} from 'react-router-dom';

import { decreaseCartItemQty, increaseCartItemQty,removeItemFromCart } from '../../slices/cartSlice';

export default function Cart(){
    const {items } = useSelector(state => state.cartState)
    const dispatch = useDispatch(); 
    const navigate = useNavigate();

    const increaseQty = (item) => {
        const count = item.quantity;
        if(item.stock === 0 ||  count >= item.stock) return;
        dispatch(increaseCartItemQty(item.product))
    }
    const decreaseQty = (item) => {
        const count = item.quantity;
        if(count === 1) return;
        dispatch(decreaseCartItemQty(item.product))
    }

    const checkoutHandler =()=>{
        navigate('/login?redirect=shipping')
    }

    return (
        <Fragment>
            {items.length===0 ? 
            <h2 className="mt-5">Your Cart is Empty</h2> :
            <Fragment>
            <h2 className="mt-5">Your Cart: <b>{items.length} items</b></h2>
            
            <div className="row d-flex justify-content-between">
                <div className="col-12 col-lg-8">
                    {items.map(item=> (
                        <Fragment>
                    <hr />
                    <div className="cart-item">
                        <div className="row">
                            <div className="col-4 col-lg-3">
                                <img src={item.image} alt={item.name} height="90" width="115" />
                            </div>
    
                            <div className="col-5 col-lg-3">
                                <Link to={`/product/${item.product}`}>{item.name}</Link>
                            </div>
    
    
                            <div className="col-4 col-lg-2 mt-4 mt-lg-0">
                                <p id="card_item_price">${item.price}</p>
                            </div>
    
                            <div className="col-4 col-lg-3 mt-4 mt-lg-0">
                                <div className="stockCounter d-inline">
                                    <span className="btn btn-danger minus" onClick={() => decreaseQty(item)}>-</span>
                                    <input type="number" className="form-control count d-inline" value={item.quantity} readOnly />
    
                                    <span className="btn btn-primary plus" onClick={() => increaseQty(item)}>+</span>
                                </div>
                            </div>
    
                            <div className="col-4 col-lg-1 mt-4 mt-lg-0">
                                <i id="delete_cart_item" onClick={()=>dispatch(removeItemFromCart(item.product))} className="fa fa-trash btn btn-danger"></i>
                            </div>
    
                        </div>
                    </div>  
                        </Fragment>
                        )
                    )
                        }
                   
                
                </div>
    
                <div className="col-12 col-lg-3 my-4">
                    <div id="order_summary">
                        <h4>Order Summary</h4>
                        <hr />
                        <p>Subtotal:  <span className="order-summary-values">{items.reduce((acc,item)=>(acc+item.quantity),0)} (Units)</span></p>
                        <p>Est. total: <span className="order-summary-values">${items.reduce((acc,item)=>(acc+item.quantity* item.price),0)}</span></p>
        
                        <hr />
                        <button id="checkout_btn" className="btn btn-primary btn-block" onClick={checkoutHandler}>Check out</button>
                    </div>
                </div>
            </div>
            </Fragment>
        }
       
        </Fragment>
    )
}

step 4:
/components/user/login.js
    import React, {Fragment, useEffect, useState } from "react";
    import MetaData from '../layouts/MetaData'
    import {clearAuthError, login} from "../../actions/userActions"
    import { useDispatch, useSelector } from "react-redux";
    import {toast} from 'react-toastify'
    import { Link, useNavigate, useLocation } from 'react-router-dom';


    const Login = () => {

        const [email,setEmail]=useState("")
        const [password,setPassword]=useState("")
        const dispatch = useDispatch();
        const navigate = useNavigate();
        const location = useLocation();

        const {loading, error, isAuthenticated} = useSelector(state=>state.authState)
       1. const redirect = location.search?'/'+location.search.split('=')[1]:'/';

        
        const submitHandler = (e)=>{
            e.preventDefault();
        dispatch(login(email,password))
        
        }
        useEffect(() => {
            if(isAuthenticated) {
                navigate(redirect)
                return
            }

            if (error) {    
            toast(error, {
                position: "bottom-center",
                type: 'error',
                onOpen:() =>{
                    dispatch(clearAuthError)
                } 

            })
            return
            }
        }, [error,isAuthenticated, dispatch,navigate,redirect]);       

    return (
        <Fragment>
        <MetaData title={`Login`}/>
        <div className="row wrapper">
            <div className="col-10 col-lg-5">
            <form  onSubmit={submitHandler} className="shadow-lg">
                <h1 className="mb-3">Login</h1>
                <div className="form-group">
                <label htmlFor="email_field">Email</label>
                <input
                    type="email"
                    id="email_field"
                    className="form-control"
                    value={email}
                    onChange={e=> setEmail(e.target.value)}
                />
                </div>

                <div className="form-group">
                <label htmlFor="password_field">Password</label>
                <input
                    type="password"
                    id="password_field"
                    className="form-control"
                    value={password}
                    onChange={e=> setPassword(e.target.value)}
                />
                </div>

                <Link to='/password/forgot' className="float-right mb-4">
                forgot Password?
                </Link>

                <button id="login_button" type="submit" className="btn btn-block py-3" disabled={loading}>
                LOGIN
                </button>

                <Link to="/register" className="float-right mt-3">
                New User?
                </Link>
            </form>
            </div>
        </div>
        </Fragment>
    );
    };

    export default Login;

step 5:

//components/cart/shipping.js
 import {  useDispatch, useSelector } from "react-redux";
import {  useState } from "react";
import {countries} from 'countries-list';
import {saveShippingInfo} from "../../slices/cartSlice";
import { useNavigate } from "react-router-dom";



export default function Shipping() {
    const {shippingInfo } = useSelector(state => state.cartState)

  
    const [address, setAddress] = useState(shippingInfo ? shippingInfo.address : '');
    const [city, setCity] = useState(shippingInfo ? shippingInfo.city : '');
    const [phoneNo, setPhoneNo] = useState(shippingInfo ? shippingInfo.phoneNo : '');
    const [postalCode, setPostalCode] = useState(shippingInfo ? shippingInfo.postalCode : '');
    const [country, setCountry] = useState(shippingInfo ? shippingInfo.country : '');
    const [state, setState] = useState(shippingInfo ? shippingInfo.state : '');
    const countryList =  Object.values(countries);

    const dispatch = useDispatch();
    const navigate = useNavigate();

    const submitHandler = (e)=>{
        e.preventDefault();
        dispatch(saveShippingInfo({address, city, phoneNo, postalCode, country, state }));
        navigate('/order/confirm')
    }
    
    
     
    return ( 
            <div className="row wrapper">
                    <div className="col-10 col-lg-5">
                        <form onSubmit={submitHandler} className="shadow-lg">
                            <h1 className="mb-4">Shipping Info</h1>
                            <div className="form-group">
                                <label htmlFor="address_field">Address</label>
                                <input
                                    type="text"
                                    id="address_field"
                                    className="form-control"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="city_field">City</label>
                                <input
                                    type="text"
                                    id="city_field"
                                    className="form-control"
                                    value={city}
                                    onChange={(e) => setCity(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="phone_field">Phone No</label>
                                <input
                                    type="phone"
                                    id="phone_field"
                                    className="form-control"
                                    value={phoneNo}
                                    onChange={(e) => setPhoneNo(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="postal_code_field">Postal Code</label>
                                <input
                                    type="number"
                                    id="postal_code_field"
                                    className="form-control"
                                    value={postalCode}
                                    onChange={(e) => setPostalCode(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="country_field">Country</label>
                                <select
                                    id="country_field"
                                    className="form-control"
                                    value={country}
                                    onChange={(e) => setCountry(e.target.value)}
                                    required

                                >

                                { countryList.map((country, i) => (

                                    <option key={i} value={country.name}>
                                        {country.name}
                                    </option>
                                ))
                                } 
                                </select>
                            </div>
                            <div className="form-group">
                                <label htmlFor="state_field">State</label>
                                <input
                                    type="text"
                                    id="state_field"
                                    className="form-control"
                                    value={state}
                                    onChange={(e) => setState(e.target.value)}
                                    required
                                />
                            </div>

                            <button
                                id="shipping_btn"
                                type="submit"
                                className="btn btn-block py-3"
                            >
                                CONTINUE
                                </button>
                        </form>
                    </div>
            </div>
    
    )
                            }




///To follow checkout steps
Shipping ,ConfirmOrder,Payment

//components/cart/CheckoutStep.js
import { Link } from "react-router-dom"



export default function CheckoutSteps({shipping, confirmOrder, payment}){
    return (

        <div className="checkout-progress d-flex justify-content-center mt-5">
            {
                shipping ?
                <Link to="/shipping">
                    <div className="triangle2-active"></div>
                  <div className="step active-step">Shipping Info</div>
                        <div className="triangle-active"></div>

                </Link>:
                <Link to="/shipping">
                 <div className="triangle2-incomplete"></div>
                 <div className="step incomplete">Shipping Info</div>
                       <div className="triangle-incomplete"></div>
                       </Link>
            }

{
                confirmOrder ?
                <Link to="/order/confirm">
                    <div className="triangle2-active"></div>
                  <div className="step active-step">Confirm Order</div>
                        <div className="triangle-active"></div>

                </Link>:
                <Link to="/order/confirm">
                 <div className="triangle2-incomplete"></div>
                 <div className="step incomplete">Confirm Order</div>
                       <div className="triangle-incomplete"></div>
                       </Link>
            }

{
                payment ?
                <Link to="/payment">
                    <div className="triangle2-active"></div>
                  <div className="step active-step">Payment</div>
                        <div className="triangle-active"></div>

                </Link>:
                <Link to="/order/confirm">
                 <div className="triangle2-incomplete"></div>
                 <div className="step incomplete">Payment</div>
                       <div className="triangle-incomplete"></div>
                       </Link>
            }
        

       
      </div>
    )
}

step 2:
//components/cart/Shipping.js
 import {  useDispatch, useSelector } from "react-redux";
import {  Fragment, useState } from "react";
import {countries} from 'countries-list';
import {saveShippingInfo} from "../../slices/cartSlice";
import { useNavigate } from "react-router-dom";
import CheckoutSteps from "./CheckoutStep";
import {toast} from "react-toastify";


export const validateShipping = (shippingInfo, navigate) => {
   
    if(
        !shippingInfo.address||
        !shippingInfo.city||
        !shippingInfo.state|| 
        !shippingInfo.country||
        !shippingInfo.phoneNo||
        !shippingInfo.postalCode
        ) {
            toast.error('Please fill the shipping information',{position: "bottom-center"})
            navigate('/shipping')
    }
} 


export default function Shipping() {
    const {shippingInfo } = useSelector(state => state.cartState)

  
    const [address, setAddress] = useState(shippingInfo ? shippingInfo.address : '');
    const [city, setCity] = useState(shippingInfo ? shippingInfo.city : '');
    const [phoneNo, setPhoneNo] = useState(shippingInfo ? shippingInfo.phoneNo : '');
    const [postalCode, setPostalCode] = useState(shippingInfo ? shippingInfo.postalCode : '');
    const [country, setCountry] = useState(shippingInfo ? shippingInfo.country : '');
    const [state, setState] = useState(shippingInfo ? shippingInfo.state : '');
    const countryList =  Object.values(countries);

    const dispatch = useDispatch();
    const navigate = useNavigate();

    const submitHandler = (e)=>{
        e.preventDefault();
        dispatch(saveShippingInfo({address, city, phoneNo, postalCode, country, state }));
        navigate('/order/confirm')
    }

   
     
    return ( 
        <Fragment>
            <CheckoutSteps shipping/>
            <div className="row wrapper">
                    <div className="col-10 col-lg-5">
                        <form onSubmit={submitHandler} className="shadow-lg">
                            <h1 className="mb-4">Shipping Info</h1>
                            <div className="form-group">
                                <label htmlFor="address_field">Address</label>
                                <input
                                    type="text"
                                    id="address_field"
                                    className="form-control"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="city_field">City</label>
                                <input
                                    type="text"
                                    id="city_field"
                                    className="form-control"
                                    value={city}
                                    onChange={(e) => setCity(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="phone_field">Phone No</label>
                                <input
                                    type="phone"
                                    id="phone_field"
                                    className="form-control"
                                    value={phoneNo}
                                    onChange={(e) => setPhoneNo(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="postal_code_field">Postal Code</label>
                                <input
                                    type="number"
                                    id="postal_code_field"
                                    className="form-control"
                                    value={postalCode}
                                    onChange={(e) => setPostalCode(e.target.value)}
                                    required
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="country_field">Country</label>
                                <select
                                    id="country_field"
                                    className="form-control"
                                    value={country}
                                    onChange={(e) => setCountry(e.target.value)}
                                    required

                                >

                                { countryList.map((country, i) => (

                                    <option key={i} value={country.name}>
                                        {country.name}
                                    </option>
                                ))
                                } 
                                </select>
                            </div>
                            <div className="form-group">
                                <label htmlFor="state_field">State</label>
                                <input
                                    type="text"
                                    id="state_field"
                                    className="form-control"
                                    value={state}
                                    onChange={(e) => setState(e.target.value)}
                                    required
                                />
                            </div>

                            <button
                                id="shipping_btn"
                                type="submit"
                                className="btn btn-block py-3"
                            >
                                CONTINUE
                                </button>
                        </form>
                    </div>
            </div>
            </Fragment>
    
    )
                            }



///Create Confirm Order Component

step 1:

//components/cart/ConfirmOrder.js
import { Fragment, useEffect } from "react";
import MetaData from "../layouts/MetaData";
import { useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import { validateShipping } from "./Shipping";
import CheckoutSteps from "./CheckoutStep";




export default function ConfirmOrder (){
    const { shippingInfo, items:cartItems} = useSelector(state => state.cartState);
    const { user} = useSelector(state => state.authState);
    const navigate = useNavigate();
    const itemsPrice = cartItems.reduce((acc,item)=>(acc+item.price*item.quantity),0);
    const shippingPrice = itemsPrice >200 ? 0 : 25;
    let taxPrice = Number(0.05 * itemsPrice);
    const totalPrice = Number(itemsPrice + shippingPrice + taxPrice ).toFixed(2);
     taxPrice = Number(taxPrice).toFixed(2);;


     const processPayment = () =>{
        const data = {
            itemsPrice,
            shippingPrice,
            taxPrice,
            totalPrice
        }
        sessionStorage.setItem('orderInfo', JSON.stringify(data))
        navigate('/payment')
     }

    useEffect(() => {
        validateShipping(shippingInfo, navigate);

    }, []);
    
    

    return (
        <Fragment>
            <MetaData title={'Confirm Order'}/>
            <CheckoutSteps shipping confirmOrder />
        <div className="row d-flex justify-content-between">
        <div className="col-12 col-lg-8 mt-5 order-confirm">

            <h4 className="mb-3">Shipping Info</h4>
            <p><b>Name:</b>{user.name}</p>
            <p><b>Phone:</b>{shippingInfo.phoneNo}</p>
            <p className="mb-4"><b>Address:</b>{shippingInfo.address}, {shippingInfo.city}, {shippingInfo.postalCode}, {shippingInfo.state}, {shippingInfo.country} </p>
            
            <hr />
            <h4 className="mt-4">Your Cart Items:</h4>
            {cartItems.map(item => (
                <Fragment>
 <div className="cart-item my-1">
                <div className="row">
                    <div className="col-4 col-lg-2">
                        <img src={item.image} alt={item.name} height="45" width="65" />
                    </div>

                    <div className="col-5 col-lg-6">
                        <Link to={`/product/${item.product}`}>{item.name}</Link>
                    </div>


                    <div className="col-4 col-lg-4 mt-4 mt-lg-0">
                        <p>{item.quantity} x ${item.price} = <b>${item.quantity * item.price}</b></p>
                    </div>

                </div>
            </div>
                </Fragment>
            ))}

            

        </div>
        
        <div className="col-12 col-lg-3 my-4">
                <div id="order_summary">
                    <h4>Order Summary</h4>
                    <hr />
                    <p>Subtotal:  <span className="order-summary-values">${itemsPrice}</span></p>
                    <p>Shipping: <span className="order-summary-values">${shippingPrice}</span></p>
                    <p>Tax:  <span className="order-summary-values">${taxPrice}</span></p>

                    <hr />

                    <p>Total: <span className="order-summary-values">${totalPrice}</span></p>

                    <hr />
                    <button id="checkout_btn" onClick={processPayment} className="btn btn-primary btn-block">Proceed to Payment</button>
                </div>
            </div>
        
        
    </div> 
    </Fragment>
    )
}


//Stripe Integration

//First Backend la than stripe integration pannanum

//install command : npm i stripe

step 1:
//backend/config/config.env
PORT = 8000
NODE_ENV = development
DB_LOCAL_URI = mongodb://127.0.0.1:27017/shoppy
JWT_SECRET=6CCLCx5uDJ
JWT_EXPIRES_TIME=7d
COOKIE_EXPIRES_TIME=7
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=dd9dab8137ca1d
SMTP_PASS=100a7d1168dff3
SMTP_FROM_NAME=shoppy
SMTP_FROM_EMAIL=noreply@jvlcart.com
BACKEND_URL=http://127.0.0.1:8000
FRONTEND_URL=http://127.0.0.1:3000 
STRIPE_API_KEY=pk_live_51Or3sWSIQMwX47Q7uCU1kSvkap9HN1XBCeXQwgRzbd1OLzbIA9glHw9HSudfXlV9o3oZbTZHa2XTrx4C3eEM8a8F00s8wHwVNm
STRIPE_SECRET_KEY=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

step 2:
server.js la irundhu cofig feature ahh app.js ku mathrom

const express = require('express');
const app = express();
const errorMiddleware = require('./middlewares/error')
const cookieParser = require('cookie-parser')
const path = require('path')
1.const dotenv = require('dotenv');
2.dotenv.config({path:path.join(__dirname,"config/config.env")});

app.use(express.json());
app.use(cookieParser());
app.use('/uploads', express.static(path.join(__dirname,'uploads')))

const products =  require('./routes/product')
const auth = require('./routes/auth')
const order = require('./routes/order') 
const payment = require('./routes/payment') 
 
app.use('/api/v1/',products)
app.use('/api/v1/',auth)
app.use('/api/v1/',order)
app.use('/api/v1/',payment)

app.use(errorMiddleware)

module.exports = app;


step 3:
//controllers/paymentController.js
const catchAsyncError = require('../middlewares/catchAsyncError');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)


exports.processPayment = catchAsyncError(async(req, res, next) => {
    const paymentIntent = await stripe.paymentIntents.create({
        amount: req.body.amount,
        currency: "usd",
        description: "TEST PAYMENT",
        metadata: { integration_check: "accept_payment"},
        shipping: req.body.shipping,
        payment_method_types: ['card'] 
    });

    res.status(200).json({
        success: true,
        client_secret: paymentIntent.client_secret
    });
});


exports.sendStripeApi  = catchAsyncError(async(req, res, next) => {
    res.status(200).json({
        stripeApiKey: process.env.STRIPE_API_KEY
    })
})

step 4:
routes/payment.js
const express = require('express');
const { processPayment, sendStripeApi } = require('../controllers/paymentController');
const { isAuthenticatedUser } = require('../middlewares/authenticate');
const router = express.Router();

router.route('/payment/process').post( isAuthenticatedUser, processPayment);
router.route('/stripeapi').get( isAuthenticatedUser, sendStripeApi);


module.exports = router;

step 5:

//app.js la route set pannanum

const express = require('express');
const app = express();
const errorMiddleware = require('./middlewares/error')
const cookieParser = require('cookie-parser')
const path = require('path')
const dotenv = require('dotenv');
dotenv.config({path:path.join(__dirname,"config/config.env")});

app.use(express.json());
app.use(cookieParser());
app.use('/uploads', express.static(path.join(__dirname,'uploads')))

const products =  require('./routes/product')
const auth = require('./routes/auth')
const order = require('./routes/order') 
const payment = require('./routes/payment') 
 
app.use('/api/v1/',products)
app.use('/api/v1/',auth)
app.use('/api/v1/',order)
app.use('/api/v1/',payment)

app.use(errorMiddleware)

module.exports = app;


//FrontEnd Stripe Integration

npm i command:npm install @stripe/react-stripe-js @stripe/stripe-js


Api.js la Payment Component Route plus other Modification ellam ithila panni vachirukom stripe ku thevai yanathu

//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect, useState} from "react";
import Profile from "./components/user/Profile";
import ProtectedRoute from "./components/route/ProtectedRoute";
import UpdateProfile from "./components/user/UpdateProfile";
import UpdatePassword from "./components/user/UpdatePassword";
import ForgotPassword from "./components/user/ForgotPassword";
import ResetPassword from "./components/user/ResetPassword";
import Cart from "./components/cart/Cart";
import Shipping from "./components/cart/Shipping";
import ConfirmOrder from "./components/cart/ConfirmOrder";
import Payment from "./components/cart/Payment";
1.import {Elements} from '@stripe/react-stripe-js';
2.import axios from "axios";
3.import { loadStripe } from "@stripe/stripe-js";






function App() {
1.const [stripeApiKey,setStripeApiKey]=useState("")
  useEffect(()=>{
    store.dispatch(loadUser)
    1.async function getStripeApiKey(){
      const {data}= await axios.get('/api/v1/stripeapi')
      setStripeApiKey(data.stripeApiKey)
    }
  })
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/myprofile" element={<ProtectedRoute><Profile /></ProtectedRoute>} />
          <Route path="/myprofile/update" element={<ProtectedRoute><UpdateProfile /></ProtectedRoute>} />
          <Route path="/myprofile/update/password" element={<ProtectedRoute><UpdatePassword /></ProtectedRoute>} />
          <Route path="/password/forgot" element={<ForgotPassword />} />
          <Route path="/password/reset/:token" element={<ResetPassword />} />
          <Route path="/cart" element={<Cart />} /> 
         <Route path="/shipping" element={<ProtectedRoute><Shipping /></ProtectedRoute>} />
         <Route path="/order/confirm" element={<ProtectedRoute><ConfirmOrder /></ProtectedRoute>} />
        1. <Route path="/payment" element={<ProtectedRoute><Elements stripe={loadStripe(stripeApiKey)}><Payment /></Elements></ProtectedRoute>} />
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;


///Payment Components


http://stripe.com/docs/testing Stripe test card details page


///Payment Component

Step 1:
//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect, useState} from "react";
import Profile from "./components/user/Profile";
import ProtectedRoute from "./components/route/ProtectedRoute";
import UpdateProfile from "./components/user/UpdateProfile";
import UpdatePassword from "./components/user/UpdatePassword";
import ForgotPassword from "./components/user/ForgotPassword";
import ResetPassword from "./components/user/ResetPassword";
import Cart from "./components/cart/Cart";
import Shipping from "./components/cart/Shipping";
import ConfirmOrder from "./components/cart/ConfirmOrder";
import Payment from "./components/cart/Payment";
import {Elements} from '@stripe/react-stripe-js';
import axios from "axios";
import { loadStripe } from "@stripe/stripe-js";






function App() {
const [stripeApiKey,setStripeApiKey]=useState("")
  useEffect(()=>{
    store.dispatch(loadUser)
    async function getStripeApiKey(){
      const {data}= await axios.get('/api/v1/stripeapi')
      setStripeApiKey(data.stripeApiKey)
    }
    getStripeApiKey()
  },[])
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/myprofile" element={<ProtectedRoute><Profile /></ProtectedRoute>} />
          <Route path="/myprofile/update" element={<ProtectedRoute><UpdateProfile /></ProtectedRoute>} />
          <Route path="/myprofile/update/password" element={<ProtectedRoute><UpdatePassword /></ProtectedRoute>} />
          <Route path="/password/forgot" element={<ForgotPassword />} />
          <Route path="/password/reset/:token" element={<ResetPassword />} />
          <Route path="/cart" element={<Cart />} /> 
         <Route path="/shipping" element={<ProtectedRoute><Shipping /></ProtectedRoute>} />
         <Route path="/order/confirm" element={<ProtectedRoute><ConfirmOrder /></ProtectedRoute>} />
   {stripeApiKey &&     <Route path="/payment" element={<ProtectedRoute><Elements stripe={loadStripe(stripeApiKey)}><Payment /></Elements></ProtectedRoute>} />}
        </Routes>
        </div>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;

//step 2:
//components/Slices/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";



const cartSlice = createSlice({
    name: 'cart',
    initialState: {
        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],
        loading: false,
        shippingInfo: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('shippingInfo')): {}
    },
    reducers: {
        addCartItemRequest(state, action){
            return { 
                ...state,
                loading: true
            }
        },
        addCartItemSuccess(state, action){
            const item = action.payload

            const isItemExist = state.items.find( i => i.product === item.product);
            
            if(isItemExist) {
                state = {
                    ...state,
                    loading: false,
                }
            }else{
                state = {
                    items: [...state.items, item],
                    loading: false
                }
                
                localStorage.setItem('cartItems', JSON.stringify(state.items));
            }
            return state
            
        },
        increaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity + 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        decreaseCartItemQty(state, action) {
            state.items = state.items.map(item => {
                if(item.product === action.payload) {
                    item.quantity = item.quantity - 1
                }
                return item;
            })
            localStorage.setItem('cartItems', JSON.stringify(state.items));

        },
        removeItemFromCart(state, action) {
            const filterItems = state.items.filter(item => {
                return item.product !== action.payload
            })
            localStorage.setItem('cartItems', JSON.stringify(filterItems));
            return {
                ...state,
                items: filterItems
            }
        },
        saveShippingInfo(state,action){
            localStorage.setItem('shippingInfo', JSON.stringify(action.payload));
            return {
                ...state,
                shippingInfo:action.payload
            } 
        },
        orderCompleted(state,action){
            localStorage.removeItem('shippingInfo');
            localStorage.removeItem('cartItems');
            localStorage.removeItem('orderInfo');
            return {
                items:[],
        loading: false,
        shippingInfo:{}
            } 
        }
        

    }
});

const { actions, reducer } = cartSlice;

export const { 
    addCartItemRequest, 
    addCartItemSuccess,
    decreaseCartItemQty,
    increaseCartItemQty,
    removeItemFromCart,
    saveShippingInfo,
    orderCompleted
   
 } = actions;

export default reducer;


step 3:
//components/cart/Payment.js


import { useElements, useStripe} from "@stripe/react-stripe-js"
// import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
// import {validateShipping} from "../cart/Shipping";
import { CardNumberElement, CardExpiryElement, CardCvcElement } from "@stripe/react-stripe-js";
import axios from "axios";
import { toast } from "react-toastify";
import { orderCompleted } from "../../slices/cartSlice";




export default function Payment(){
    const stripe = useStripe();
    const elements = useElements();
    const dispatch = useDispatch()
    const navigate = useNavigate();
    const orderInfo = JSON.parse(sessionStorage.getItem('orderInfo'))
    const {user} = useSelector(state => state.authState)
    const {items:cartItems, shippingInfo  } = useSelector(state => state.cartState)
    const paymentData = {
        
            amount:Math.round(orderInfo.totalPrice*100),
            shipping: {
                name: user.name,
                address: {
                    city: shippingInfo.city,
                    postal_code: shippingInfo.postalCode,
                    country: shippingInfo.country,
                    state: shippingInfo.state,
                    line1:  shippingInfo.address
                },
                phone: shippingInfo.phoneNo
            }
    }

    const order ={
        orderItems: cartItems,
        shippingInfo
    }

    if(orderInfo){
        order.itemsPrice = orderInfo.itemsPrice
        order.shippingPrice = orderInfo.shippingPrice
        order.taxprice = orderInfo.taxprice
        order.totalprice = orderInfo.totalPrice
    }
    // useEffect(()=>{
    //     validateShipping(shippingInfo,navigate)
    // },[])

    const submitHandler = async (e) => {
        e.preventDefault();
        document.querySelector('#pay_btn').disabled = true;
        try{
            const {data} = await axios.post('/api/v1/payment/process', paymentData)
          const clientSecret = data.client_secret;
        const result =  stripe.confirmCardPayment(clientSecret,{
            payment_method: {
            card: elements.getElement(CardNumberElement),
            billing_details:{
            name:user.name,
            email:user.email
            }
        }
          });
          if(result.error){
            toast((await result).error.message,{
                type:'error',
                position:'bottom-center'
            })
            document.querySelector('#pay_btn').disabled = false;
          }else{
            if((await result).paymentIntent.status === 'succeeded'){
                 toast('payment success!',{
                    type:'success',
                    position:"bottom-center"
                 })
                 dispatch(orderCompleted())
                 navigate('/order/success')
            }else{
                toast('Please Try again!',{
                    type:'warning',
                    position:"bottom-center"
                 })
            }
          }

        }catch(error){

        }


    }


    return (
        <div className="row wrapper">
		<div className="col-10 col-lg-5">
            <form  onSubmit={submitHandler} className="shadow-lg">
                <h1 className="mb-4">Card Info</h1>
                <div className="form-group">
                  <label htmlFor="card_num_field">Card Number</label>
                  <CardNumberElement
                    type="text"
                    id="card_num_field"
                    className="form-control"
                    value=""
                  />
                </div>
				
				<div className="form-group">
                  <label htmlFor="card_exp_field">Card Expiry</label>
                  <CardExpiryElement
                    type="text"
                    id="card_exp_field"
                    className="form-control"
                    
                  />
                </div>
				
				<div className="form-group">
                  <label htmlFor="card_cvc_field">Card CVC</label>
                  <CardCvcElement
                    type="text"
                    id="card_cvc_field"
                    className="form-control"
                    
                  />
                </div>
      
            
                <button
                  id="pay_btn"
                  type="submit"
                  className="btn btn-block py-3"
                >
                  Pay - {`${orderInfo && orderInfo.totalPrice}`}
                </button>
    
              </form>
			  </div>
        </div>
    )
}

Stripe Methode konjam Problem ahh iruku Parkanum



video 9:

Header la profile la dashboard theriyarathuku condition elutharom


components/layout/header.js
import React from 'react';
import Search from './Search';
import { Link, useNavigate } from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import {Dropdown,Image} from 'react-bootstrap';
import { logout } from '../../actions/userActions';



 const Header = () => {
   const {isAuthenticated,user}=useSelector(state => state.authState);
   const {items:cartItems}=useSelector(state => state.cartState);
    const dispatch = useDispatch();
    const navigate = useNavigate();
   const logoutHandler = () =>{
             dispatch(logout);
   }
  return (
    

<nav className="navbar row">
      <div className="col-12 col-md-3">
        <div className="navbar-brand">
          <Link to="/">
          <img width="45px" src="/images/logo.png" alt='ShoppyCat Logo'/> 
          </Link>
          <div className='text-white'>Shoppy</div>
          
        </div>
      </div>

      <div className="col-12 col-md-6 mt-2 mt-md-0">
       <Search/>
      </div>

      <div className="col-12 col-md-3 mt-4 mt-md-0 text-center">
        { isAuthenticated ? 
        (
             <Dropdown className='d-inline'>
                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>
                    <figure className='avatar avatar-nav'>
                         <Image width="50px" src={user.avatar?? './images/default_avatar.png'}/>
                    </figure>
                    <span>{user.name}</span>
                  </Dropdown.Toggle>
                  <Dropdown.Menu>
            1. {user.role === 'admin' &&     <Dropdown.Item className='text-danger' onClick={()=>{navigate('/admin/dashboard')}}>Dashboard</Dropdown.Item>}
                    <Dropdown.Item className='text-danger' onClick={()=>{navigate('/myprofile')}}>Profile</Dropdown.Item>
                    <Dropdown.Item className='text-danger' onClick={logoutHandler}>Logout</Dropdown.Item>
                  </Dropdown.Menu>
             </Dropdown>

        ) 
        
        :
        <Link to="/login" className="btn" id="login_btn">Login</Link>
  }
       <Link to='/cart'><span id="cart" className="ml-3">Cart</span></Link> 
        <span className="ml-1" id="cart_count">{cartItems.length}</span>
      </div>
    </nav>
  
  )
}
export default Header



//Create Dashboard Component


//sidebar content Black ahh theriyarathuku 
//App.css
#sidebar ul li div.dropdown-menu a {
  color: black;
 
}
//components/admin/Dashboard.js

import Sidebar from "./Sidebar";

export default function Dashboard(){
    return (
        <div className="row">
            <div className="col-12 col-md-2">
                 <Sidebar/>
            </div>
            <div className="col-12 col-md-10">
            <h1 className="my-4">Dashboard</h1>
                            <div className="row pr-4">
                                <div className="col-xl-12 col-sm-12 mb-3">
                                    <div className="card text-white bg-primary o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Total Amount<br /> <b>$3425</b>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="row pr-4">
                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-success o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Products<br /> <b>23</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" to="/admin/products">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-danger o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Orders<br /> <b>345</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" to="/admin/orders">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-info o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Users<br /> <b>55</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" href="/admin/users">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-warning o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Out of Stock<br /> <b>10</b></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
    </div>


        </div>
    )
}

//components/admin/Sidebar.js

import {Link, useNavigate} from "react-router-dom";
import {NavDropdown} from "react-bootstrap";


export default function Sidebar(){
    const navigate = useNavigate();
    return (
        <div className="sidebar-wrapper">
                <nav id="sidebar">
                    <ul className="list-unstyled components">
                    <li>
                        <Link  to='/admin/dashboard'><i className="fas fa-tachometer-alt"></i> Dashboard</Link>
                    </li>
            
                    <li>
                       <NavDropdown title={
                        <i className="fa fa-product-hunt">Product</i>
                       }>
                        <NavDropdown.Item onClick={()=>navigate('/admin/products')}><i className="fa fa-shopping-basket">All</i></NavDropdown.Item>
                        <NavDropdown.Item onClick={()=>navigate('/admin/products/create')}><i className="fa fa-plus">Create</i></NavDropdown.Item>

                       </NavDropdown>
                    </li>

                    <li>
                        <Link to='/admin/orders'><i className="fa fa-shopping-basket"></i> Orders</Link>
                    </li>

                    <li>
                        <Link to='/admin/users'><i className="fa fa-users"></i> Users</Link>
                    </li>

                    <li>
                        <Link to='/admin/reviews'><i className="fa fa-users"></i>Reviews</Link>
                    </li>
            
                </ul>
                </nav>
            </div>
    )
}

//components/route/ProtectedRoute.js
import { useSelector } from 'react-redux';
import {Navigate} from 'react-router-dom';
import Loader from "../layouts/Loader"



export default function ProtectedRoute ({children, isAdmin}) {
    const { isAuthenticated,loading,user} = useSelector(state => state.authState)

    if(!isAuthenticated && !loading) {
        return <Navigate to="/login" />
    }

    if(isAuthenticated) {
        if(isAdmin === true && user.role !== 'admin'){
            return <Navigate to="/" />
        }
        return children;
    }
    if(loading) {
        return <Loader/>
    }
   
       
    }

//App.js
import "./App.css";
import Home from "./components/Home";
import Footer from "./components/layouts/Footer";
import Header from "./components/layouts/Header";
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import {HelmetProvider} from 'react-helmet-async';
import {ToastContainer} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ProductDetail from "./components/product/ProductDetail";
import ProductSearch from "./components/product/ProductSearch"
import Login from "./components/user/Login";
import Register from "./components/user/Register";
import store from './store';
import { loadUser } from "./actions/userActions";
import React, {useEffect, useState} from "react";
import Profile from "./components/user/Profile";
import ProtectedRoute from "./components/route/ProtectedRoute";
import UpdateProfile from "./components/user/UpdateProfile";
import UpdatePassword from "./components/user/UpdatePassword";
import ForgotPassword from "./components/user/ForgotPassword";
import ResetPassword from "./components/user/ResetPassword";
import Cart from "./components/cart/Cart";
import Shipping from "./components/cart/Shipping";
import ConfirmOrder from "./components/cart/ConfirmOrder";
import Payment from "./components/cart/Payment";
import {Elements} from '@stripe/react-stripe-js';
import axios from "axios";
import { loadStripe } from "@stripe/stripe-js";
import Dashboard from "./components/admin/Dashboard";






function App() {
const [stripeApiKey,setStripeApiKey]=useState("")
  useEffect(()=>{
    store.dispatch(loadUser)
    async function getStripeApiKey(){
      const {data}= await axios.get('/api/v1/stripeapi')
      setStripeApiKey(data.stripeApiKey)
    }
    getStripeApiKey()
  },[])
  return ( 
    <Router>
      <div className="App">
        <HelmetProvider>

        <Header />
        <div className="container container-fluid">
        <ToastContainer  theme="dark"/>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/search/:keyword" element={<ProductSearch />} />
          <Route path="/product/:id" element={<ProductDetail />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/myprofile" element={<ProtectedRoute><Profile /></ProtectedRoute>} />
          <Route path="/myprofile/update" element={<ProtectedRoute><UpdateProfile /></ProtectedRoute>} />
          <Route path="/myprofile/update/password" element={<ProtectedRoute><UpdatePassword /></ProtectedRoute>} />
          <Route path="/password/forgot" element={<ForgotPassword />} />
          <Route path="/password/reset/:token" element={<ResetPassword />} />
          <Route path="/cart" element={<Cart />} /> 
         <Route path="/shipping" element={<ProtectedRoute><Shipping /></ProtectedRoute>} />
         <Route path="/order/confirm" element={<ProtectedRoute><ConfirmOrder /></ProtectedRoute>} />
   {stripeApiKey &&     <Route path="/payment" element={<ProtectedRoute><Elements stripe={loadStripe(stripeApiKey)}><Payment /></Elements></ProtectedRoute>} />}
        </Routes>
        </div>
        <Routes>
       1. <Route path="/admin/dashboard" element={<ProtectedRoute isAdmin={true}><Dashboard /></ProtectedRoute>} />
       
        </Routes>

        <Footer />
        </HelmetProvider>
      </div>
    </Router>
  );
}

export default App;



//Admin ella Products um Display Panrathuku Below coding elathanum Backendla

//backend/controllers/productController.js

// get admin products - api/v1/admin/products

exports.getAdminProducts = catchAsyncError(async (req, res, next) =>{
  const products = await Product.find();
  res.status(200).send({
    success: true,
    products
  })
});

//backend/routes/product.js

const express = require('express');
const { getProducts, 
        newProduct, 
        getSingleProduct, 
        updateProduct, 
        deleteProduct, 
        createReview,
         getReviews,
          deleteReview, 
          getAdminProducts} = require('../controllers/productController');
const router = express.Router();
const {isAuthenticatedUser, authorizeRoles} = require('../middlewares/authenticate');

router.route('/products').get(getProducts);

router.route('/product/:id')
                           .get(getSingleProduct)
                           .put(updateProduct)
                           .delete(deleteProduct)
router.route('/review').put(isAuthenticatedUser,createReview)
                       .delete(deleteReview);
router.route('/reviews').get(getReviews);

                          
// Admin Routes
router.route('/admin/product/new').post(isAuthenticatedUser, authorizeRoles('admin'), newProduct);
1.router.route('/admin/products').get(isAuthenticatedUser, authorizeRoles('admin'), getAdminProducts);
                        
module.exports = router


//FrontEnd Dashboard component
//src/slices/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productsSlice = createSlice({
    name: 'products',
    initialState:{
        loading: false
    },
    reducers:{
        productsRequest(state,action){
            return {
                loading: true
            }
        },
        productsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products,
                productsCount:action.payload.count,
                resPerPage: action.payload.resPerPage
            }
        },
        productsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
        adminProductsRequest(state,action){
            return {
                loading: true
            }
        },
        adminProductsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products,
               
            }
        },
       adminProductsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        }
    }
})


const { actions,reducer}= productsSlice;

export const {productsRequest,
              productsSuccess,
              productsFail,
              adminProductsFail,
               adminProductsRequest,
            adminProductsSuccess
        } = actions;

export default reducer;

step 2:
src/actions/productAction.js
export const getAdminProducts = async (dispatch) =>{

    try{
        dispatch(adminProductsRequest())
       
        const {data} = await axios.get(`/api/v1/admin/products`);
        dispatch(adminProductsSuccess(data))
    }catch(error){
        //handle error
        dispatch(adminProductsFail(error.response.data.message))
    }
}

step 3:

Dasboard la products count ellam mention pannanum

//components/admin/Dashboard.js
import { useEffect } from "react";
import Sidebar from "./Sidebar";
import {useDispatch, useSelector} from 'react-redux';
import { getAdminProducts } from "../../actions/productActions";

export default function Dashboard(){
    const { products =[]}= useSelector( state => state.productsState);
    const dispatch = useDispatch();
    let outOfStock = 0;

    useEffect(()=>{
        dispatch(getAdminProducts);
    },[])

    if(products.length > 0){
        products.forEach(product =>{
            if(product.stock === 0){
                outOfStock =  outOfStock + 1;
            }
        })
    }


    return (
        <div className="row">
            <div className="col-12 col-md-2">
                 <Sidebar/>
            </div>
            <div className="col-12 col-md-10">
            <h1 className="my-4">Dashboard</h1>
                            <div className="row pr-4">
                                <div className="col-xl-12 col-sm-12 mb-3">
                                    <div className="card text-white bg-primary o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Total Amount<br /> <b>$3425</b>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="row pr-4">
                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-success o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Products<br /> <b>{products.length}</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" to="/admin/products">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-danger o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Orders<br /> <b>345</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" to="/admin/orders">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-info o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Users<br /> <b>55</b></div>
                                        </div>
                                        <a className="card-footer text-white clearfix small z-1" href="/admin/users">
                                            <span className="float-left">View Details</span>
                                            <span className="float-right">
                                                <i className="fa fa-angle-right"></i>
                                            </span>
                                        </a>
                                    </div>
                                </div>


                                <div className="col-xl-3 col-sm-6 mb-3">
                                    <div className="card text-white bg-warning o-hidden h-100">
                                        <div className="card-body">
                                            <div className="text-center card-font-size">Out of Stock<br /> <b>{outOfStock}</b></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
    </div>


        </div>
    )
}


///Admin Product List Display Panrathuku Following Steps Ahh follow Pannanum

step 1:
install commands:npm install mdbreact

step 1:
//src/slices/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productsSlice = createSlice({
    name: 'products',
    initialState:{
        loading: false
    },
    reducers:{
        productsRequest(state,action){
            return {
                loading: true
            }
        },
        productsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products,
                productsCount:action.payload.count,
                resPerPage: action.payload.resPerPage
            }
        },
        productsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
        adminProductsRequest(state,action){
            return {
                loading: true
            }
        },
        adminProductsSuccess(state,action){
            return{
                loading: false,
                products: action.payload.products,
               
            }
        },
       adminProductsFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
      1.  clearError(state, action){
            return{
                ...state,
                error: null
            }
        }
    }
})


const { actions,reducer}= productsSlice;

export const {productsRequest,
              productsSuccess,
              productsFail,
              adminProductsFail,
               adminProductsRequest,
            adminProductsSuccess,
            clearError
        } = actions;

export default reducer;

//step 2:
//components/admin/ProductList.js
import { Fragment, useEffect } from 'react'
import {useDispatch, useSelector} from 'react-redux'
import { clearError } from '../../slices/productsSlice'
import Loader from '../layouts/Loader';
import { MDBDataTable} from 'mdbreact';
import { Link } from "react-router-dom";
import { Button } from "react-bootstrap";
import { toast } from 'react-toastify';
import { getAdminProducts } from "../../actions/productActions";
import Sidebar from './Sidebar';





export default function ProductList(){
    const { products = [], loading = true, error } = useSelector(state => state.productsState)
    const dispatch = useDispatch();

    const setProducts = () =>{
        const data = {
            columns :[
                {
                    label:"ID",
                    field:"id",
                    sort:'asc'
                },
                {
                    label:"Name",
                    field:"name",
                    sort:'asc'
                },
                {
                    label:"Price",
                    field:"price",
                    sort:'asc'
                },
                {
                    label:"Stock",
                    field:"stock",
                    sort:'asc'
                },
                {
                    label:"Actions",
                    field:"actions",
                    sort:'asc'
                },

            ],
            rows :[]
        }
        products.forEach( product =>{
            data.rows.push({
                id: product._id,
                name: product.name,
                price : `$${product.price}`,
                stock: product.stock,
                actions: (
                    <Fragment>
                        <Link to={`/admin/product/${product._id}`} className="btn btn-primary"><i className='fa fa-pencil'></i></Link>
                        <Button className="btn btn-danger py-1 px-2 ml-2">
                         <i className='fa fa-trash'></i>
                        </Button>
                    </Fragment>
                )
            })
            
        })
        return data;
    }

    useEffect(()=>{
        if(error){
            toast(error,{
                position: "bottom-center",
                type: 'error',
                onOpen:()=>{dispatch(clearError() )}
            })
            return
        }
        dispatch(getAdminProducts)
    },[dispatch, error])

    return (
        <div className="row">
        <div className="col-12 col-md-2">
             <Sidebar/>
        </div>
        <div className="col-12 col-md-10">
        <h1 className="my-4">Product List</h1>
        <Fragment>
            {loading ? <Loader/>:
            <MDBDataTable
            data={setProducts()}
            bordered
            striped
            hover
            className="px-3"
            />
            }
        </Fragment>
                        
                        
</div>


    </div>

    )
}


Step 3:
//App.js
  {/* Admin Routes */}
        <Routes>
        <Route path="/admin/dashboard" element={<ProtectedRoute isAdmin={true}><Dashboard /></ProtectedRoute>} />
       1. <Route path="/admin/products" element={<ProtectedRoute isAdmin={true}><ProductList /></ProtectedRoute>} />
       
        </Routes>


////Admin Create Product
in Backend

///backend/controllers/productController.js
//Create Product - /api/v1/product/new
exports.newProduct = catchAsyncError (async (req,res,next)=>{

  let images = []

  if(req.files.length > 0){
    req.files.forEach(file => {
      let url = `${process.env.BACKEND_URL}/uploads/product/${file.originalname}`;
      images.push({ image: url})
    })
  }
  req.body.images = images;

  req.body.user = req.user.id;
  const product = await Product.create(req.body);
  res.status(201).json({
     success: true,
     product
  })
 });


step 2:
///backend/routes/product.js
const express = require('express');
const { getProducts, 
        newProduct, 
        getSingleProduct, 
        updateProduct, 
        deleteProduct, 
        createReview,
         getReviews,
          deleteReview, 
          getAdminProducts} = require('../controllers/productController');
const router = express.Router();
const {isAuthenticatedUser, authorizeRoles} = require('../middlewares/authenticate');

1.const multer = require('multer');
const path = require('path')

const upload = multer({storage: multer.diskStorage({
    destination: function(req, file, cb){
        cb(null,path.join(__dirname, '..', 'uploads/product'))
    },
    filename: function(req, file, cb){
        cb(null,file.originalname)
    }
})})

router.route('/products').get(getProducts);

router.route('/product/:id')
                           .get(getSingleProduct)
                           .put(updateProduct)
                           .delete(deleteProduct)
router.route('/review').put(isAuthenticatedUser,createReview)
                       .delete(deleteReview);
router.route('/reviews').get(getReviews);

                          
// Admin Routes
router.route('/admin/product/new').post(isAuthenticatedUser, authorizeRoles('admin'),upload.array('images'), newProduct);
router.route('/admin/products').get(isAuthenticatedUser, authorizeRoles('admin'), getAdminProducts);
                        
module.exports = router


Frontend Create a admin new product

//src/slices/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name: 'product',
    initialState:{
        loading: false,
        product:[],
        isProductCreated: false
    },
    reducers:{
        productRequest(state,action){
            return {
                loading: true
            }
        },
        productSuccess(state,action){
            return{
                loading: false,
                product: action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
       newProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       newProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                product: action.payload.product,
                isProductCreated: true
            }
        },
        newProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
                isProductCreated: false
            }
        },
        clearProductCreated(state,action){
            return{
                ...state,
                isProductCreated: false
            }
        }
    }
})


const { actions,reducer}= productSlice;

export const {productRequest,
              productSuccess,
              productFail,
              newProductRequest,
              newProductSuccess,
              newProductFail,
              clearProductCreated
            } = actions;

export default reducer;


step 2:
//src/actions/productAction.js
import { Fragment, useEffect, useState } from 'react'
import Sidebar from './Sidebar';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { clearProductCreated } from '../../slices/productSlice';
import { createNewProduct } from '../../actions/productActions';
import { toast } from 'react-toastify';
import { clearError } from '../../slices/productsSlice';




export default function NewProduct (){
  const [name, setName] = useState("");
  const [price,setPrice]= useState("");
  const [description,setDescription]= useState("");
  const [category, setCategory]=useState("");
  const [stock,setStock]=useState(0);
  const [seller,setSeller]=useState('');
  const [images,setImages]=useState([]);
  const [imagesPreview,setImagesPreview] = useState([]);

  const {loading, isProductCreated, error} = useSelector( state => state.productState)

  const categories = [
    'Electronics',
    'Mobile Phones',
    'Laptops',
    'Accessories',
    'Headphones',
    'Food',
    'Books',
    'Cloths/Shoes',
    'Beauty/Health',
    'Sports',
    'outdoor',
    'Home'
  ];

  const navigate = useNavigate()
  const dispatch = useDispatch()

  const onImagesChange = (e) =>{
    const files = Array.from(e.target.files);

    files.forEach(file => {
      const reader = new FileReader();

      reader.onload = ()=>{
        if(reader.readyState == 2){
          setImagesPreview(oldArray => [...oldArray,reader.result])
          setImages(oldArray=>[...oldArray,file])
        }
      }
      reader.readAsDataURL(file)
    })
  }
  const submitHandler = (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('name',name);
    formData.append('price',price);
    formData.append('stock',stock);
    formData.append('description',description);
    formData.append('seller',seller);
    formData.append('category',category);
    images.forEach (image =>{
      formData.append('images',image)
    })
dispatch(createNewProduct(formData))
  }

  useEffect(()=>{
    if(isProductCreated){
      toast('Product Created Succesfully',{
        type:"success",
        position:"bottom-center",
        onOpen:()=> dispatch(clearProductCreated())
      })
      navigate('/admin/products')
      return;
    }
    if(error){
      toast(error,{
        position:"bottom-center",
        type:'error',
        onOpen:()=>{dispatch(clearError())}
      })
    }
  },[isProductCreated, error, dispatch])

    return (



        <div className="row">
        <div className="col-12 col-md-2">
             <Sidebar/>
        </div>
        <div className="col-12 col-md-10">
        <h1 className="my-4">Product List</h1>
        <Fragment>
        <div className="wrapper my-5"> 
        <form  onSubmit={submitHandler} className="shadow-lg" encType='multipart/form-data'>
            <h1 className="mb-4">New Product</h1>

            <div className="form-group">
              <label htmlFor="name_field">Name</label>
              <input
                type="text"
                id="name_field"
                className="form-control"
                onChange={e => setName(e.target.value)}
                value={name}
              />
            </div>

            <div className="form-group">
                <label htmlFor="price_field">Price</label>
                <input
                  type="text"
                  id="price_field"
                  className="form-control"
                  onChange={e => setPrice(e.target.value)}
                  value={price}
                />
              </div>

              <div className="form-group">
                <label htmlFor="description_field">Description</label>
                <textarea
                     className="form-control" 
                     id="description_field" 
                     rows="8" 
                     onChange={e => setDescription(e.target.value)}
                     value={description}
                 ></textarea>
              </div>

              <div className="form-group">
                <label htmlFor="category_field">Category</label>
                <select  onChange={e=>setCategory(e.target.value)} className="form-control" id="category_field">
                    <option value=''>Select</option>
                    {categories.map( category => (
                     <option key={category} value={category}>{category}</option>
                    ))}
                    
                  </select>
              </div>
              <div className="form-group">
                <label htmlFor="stock_field">Stock</label>
                <input
                  type="number"
                  id="stock_field"
                  className="form-control"
                  onChange={e => setStock(e.target.value)}
                  value={stock}
                />
              </div>

              <div className="form-group">
                <label htmlFor="seller_field">Seller Name</label>
                <input
                  type="text"
                  id="seller_field"
                  className="form-control"
                  onChange={e => setSeller(e.target.value)}
                  value={seller}
                />
              </div>
              
              <div className='form-group'>
                <label>Images</label>
                
                    <div className='custom-file'>
                        <input
                            type='file'
                            name='product_images'
                            className='custom-file-input'
                            id='customFile'
                            multiple
                            onChange={onImagesChange}
                        />
                        <label className='custom-file-label' htmlFor='customFile'>
                            Choose Images
                        </label>
                    </div>
                    {imagesPreview.map(image => (
                      <img 
                      className='mt-3 mr-2'
                      key={image}
                      src={image}
                      alt={`Image Preview`}
                      width="55"
                      height="52"
                      />
                    ))}
                    
            </div>

  
            <button
              id="login_button"
              type="submit"
              disabled={loading}
              className="btn btn-block py-3"
            >
              CREATE
            </button>

          </form>
    </div> 
        </Fragment>
                        
                        
</div>


    </div>
       
    )
}

step 3:
//src/components/admin/NewProduct.js
import { Fragment, useEffect, useState } from 'react'
import Sidebar from './Sidebar';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { clearProductCreated } from '../../slices/productSlice';
import { createNewProduct } from '../../actions/productActions';
import { toast } from 'react-toastify';
import { clearError } from '../../slices/productsSlice';




export default function NewProduct (){
  const [name, setName] = useState("");
  const [price,setPrice]= useState("");
  const [description,setDescription]= useState("");
  const [category, setCategory]=useState("");
  const [stock,setStock]=useState(0);
  const [seller,setSeller]=useState('');
  const [images,setImages]=useState([]);
  const [imagesPreview,setImagesPreview] = useState([]);

  const {loading, isProductCreated, error} = useSelector( state => state.productState)

  const categories = [
    'Electronics',
    'Mobile Phones',
    'Laptops',
    'Accessories',
    'Headphones',
    'Food',
    'Books',
    'Cloths/Shoes',
    'Beauty/Health',
    'Sports',
    'outdoor',
    'Home'
  ];

  const navigate = useNavigate()
  const dispatch = useDispatch()

  const onImagesChange = (e) =>{
    const files = Array.from(e.target.files);

    files.forEach(file => {
      const reader = new FileReader();

      reader.onload = ()=>{
        if(reader.readyState == 2){
          setImagesPreview(oldArray => [...oldArray,reader.result])
          setImages(oldArray=>[...oldArray,file])
        }
      }
      reader.readAsDataURL(file)
    })
  }
  const submitHandler = (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('name',name);
    formData.append('price',price);
    formData.append('stock',stock);
    formData.append('description',description);
    formData.append('seller',seller);
    formData.append('category',category);
    images.forEach (image =>{
      formData.append('images',image)
    })
dispatch(createNewProduct(formData))
  }

  useEffect(()=>{
    if(isProductCreated){
      toast('Product Created Succesfully',{
        type:"success",
        position:"bottom-center",
        onOpen:()=> dispatch(clearProductCreated())
      })
      navigate('/admin/products')
      return;
    }
    if(error){
      toast(error,{
        position:"bottom-center",
        type:'error',
        onOpen:()=>{dispatch(clearError())}
      })
    }
  },[isProductCreated, error, dispatch])

    return (



        <div className="row">
        <div className="col-12 col-md-2">
             <Sidebar/>
        </div>
        <div className="col-12 col-md-10">
        <h1 className="my-4">Product List</h1>
        <Fragment>
        <div className="wrapper my-5"> 
        <form  onSubmit={submitHandler} className="shadow-lg" encType='multipart/form-data'>
            <h1 className="mb-4">New Product</h1>

            <div className="form-group">
              <label htmlFor="name_field">Name</label>
              <input
                type="text"
                id="name_field"
                className="form-control"
                onChange={e => setName(e.target.value)}
                value={name}
              />
            </div>

            <div className="form-group">
                <label htmlFor="price_field">Price</label>
                <input
                  type="text"
                  id="price_field"
                  className="form-control"
                  onChange={e => setPrice(e.target.value)}
                  value={price}
                />
              </div>

              <div className="form-group">
                <label htmlFor="description_field">Description</label>
                <textarea
                     className="form-control" 
                     id="description_field" 
                     rows="8" 
                     onChange={e => setDescription(e.target.value)}
                     value={description}
                 ></textarea>
              </div>

              <div className="form-group">
                <label htmlFor="category_field">Category</label>
                <select  onChange={e=>setCategory(e.target.value)} className="form-control" id="category_field">
                    <option value=''>Select</option>
                    {categories.map( category => (
                     <option key={category} value={category}>{category}</option>
                    ))}
                    
                  </select>
              </div>
              <div className="form-group">
                <label htmlFor="stock_field">Stock</label>
                <input
                  type="number"
                  id="stock_field"
                  className="form-control"
                  onChange={e => setStock(e.target.value)}
                  value={stock}
                />
              </div>

              <div className="form-group">
                <label htmlFor="seller_field">Seller Name</label>
                <input
                  type="text"
                  id="seller_field"
                  className="form-control"
                  onChange={e => setSeller(e.target.value)}
                  value={seller}
                />
              </div>
              
              <div className='form-group'>
                <label>Images</label>
                
                    <div className='custom-file'>
                        <input
                            type='file'
                            name='product_images'
                            className='custom-file-input'
                            id='customFile'
                            multiple
                            onChange={onImagesChange}
                        />
                        <label className='custom-file-label' htmlFor='customFile'>
                            Choose Images
                        </label>
                    </div>
                    {imagesPreview.map(image => (
                      <img 
                      className='mt-3 mr-2'
                      key={image}
                      src={image}
                      alt={`Image Preview`}
                      width="55"
                      height="52"
                      />
                    ))}
                    
            </div>

  
            <button
              id="login_button"
              type="submit"
              disabled={loading}
              className="btn btn-block py-3"
            >
              CREATE
            </button>

          </form>
    </div> 
        </Fragment>
                        
                        
</div>


    </div>
       
    )
}

step 4:
//App.js
<Route path="/admin/products/create" element={<ProtectedRoute isAdmin={true}><NewProduct /></ProtectedRoute>} />


////Delete Admin Product

//backend
step 1:
//backend/routes/product.js

router.route('/admin/product/:id').delete(isAuthenticatedUser, authorizeRoles('admin'), deleteProduct);



FrontEnd Admin Delete Function
step 1:
//src/slices/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name: 'product',
    initialState:{
        loading: false,
        product:[],
        isProductCreated: false,
        isProductDeleted: false
    },
    reducers:{
        productRequest(state,action){
            return {
                loading: true
            }
        },
        productSuccess(state,action){
            return{
                loading: false,
                product: action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
       newProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       newProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                product: action.payload.product,
                isProductCreated: true
            }
        },
        newProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
                isProductCreated: false
            }
        },
        clearProductCreated(state,action){
            return{
                ...state,
                isProductCreated: false
            }
        },
        deleteProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       deleteProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                isProductDeleted: true
            }
        },
        deleteProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
            }
        },
        clearProductDeleted(state,action){
            return{
                ...state,
                isProductDeleted: false
            }
        }
    }
})


const { actions,reducer}= productSlice;

export const {productRequest,
              productSuccess,
              productFail,
              newProductRequest,
              newProductSuccess,
              newProductFail,
              clearProductCreated,
              deleteProductFail,
              deleteProductRequest,
              deleteProductSuccess,
              clearProductDeleted
            } = actions;

export default reducer;

step 2:
src/actions/productAction.js
export const deleteProduct = id => async (dispatch) =>{

    try{
        dispatch(deleteProductRequest())
       
        await axios.delete(`/api/v1/admin/product/${id}`);
        dispatch(deleteProductSuccess())
    }catch(error){
        //handle error
        dispatch(deleteProductFail(error.response.data.message))
    }
}

step 3:
//components/admin/ProductList.js

import { Fragment, useEffect } from 'react'
import {useDispatch, useSelector} from 'react-redux'
import { clearError } from '../../slices/productsSlice'
import Loader from '../layouts/Loader';
import { MDBDataTable} from 'mdbreact';
import { Link } from "react-router-dom";
import { Button } from "react-bootstrap";
import { toast } from 'react-toastify';
import { deleteProduct, getAdminProducts } from "../../actions/productActions";
import Sidebar from './Sidebar';
1.import { clearProductDeleted } from '../../slices/productSlice';





export default function ProductList(){
    const { products = [], loading = true, error } = useSelector(state => state.productsState)
  1.  const { isProductDeleted, error:productError     } = useSelector(state => state.productState)
    const dispatch = useDispatch();

    const setProducts = () =>{
        const data = {
            columns :[
                {
                    label:"ID",
                    field:"id",
                    sort:'asc'
                },
                {
                    label:"Name",
                    field:"name",
                    sort:'asc'
                },
                {
                    label:"Price",
                    field:"price",
                    sort:'asc'
                },
                {
                    label:"Stock",
                    field:"stock",
                    sort:'asc'
                },
                {
                    label:"Actions",
                    field:"actions",
                    sort:'asc'
                },

            ],
            rows :[]
        }
        products.forEach( product =>{
            data.rows.push({
                id: product._id,
                name: product.name,
                price : `$${product.price}`,
                stock: product.stock,
                actions: (
                    <Fragment>
                        <Link to={`/admin/product/${product._id}`} className="btn btn-primary"> <i className="fa fa-pencil"></i></Link>
                    1.    <Button  onClick={e=>deleteHandler(e,product._id)} className="btn btn-danger py-1 px-2 ml-2">
                         <i className='fa fa-trash'></i>
                        </Button>
                    </Fragment>
                )
            })
            
        })
        return data;
    }

    const deleteHandler = (e,id)=>{
        e.target.disabled = true;
        dispatch(deleteProduct(id))
    }

    useEffect(()=>{
        if(error || productError){
            toast(error || productError,{
                position: "bottom-center",
                type: 'error',
                onOpen:()=>{dispatch(clearError() )}
            })
            return
        }
        if(isProductDeleted){
            toast('Product Deleted Succesfully',{
              type:"success",
              position:"bottom-center",
              onOpen:()=> dispatch(clearProductDeleted())
            })
            
            return;
          }
        dispatch(getAdminProducts)
    },[dispatch, error, isProductDeleted])

    return (
        <div className="row">
        <div className="col-12 col-md-2">
             <Sidebar/>
        </div>
        <div className="col-12 col-md-10">
        <h1 className="my-4">Product List</h1>
        <Fragment>
            {loading ? <Loader/>:
            <MDBDataTable
            data={setProducts()}
            bordered
            striped
            hover
            className="px-3"
            />
            }
        </Fragment>
                        
                        
</div>


    </div>

    )
}



///Admin : Update Product

///Bakend

step 1:
//backend/controllers/productControllers.js


//Update Product-/api/v1/product/:id
exports.updateProduct = async (req, res, next) => {
  let product = await Product.findById(req.params.id);

  //uploading Images
  let images = []

  //if images not cleared we keep existing images
  if(req.body.imagesCleared === 'false'){
    images = product.images;
  }


  if(req.files.length > 0){
    req.files.forEach(file => {
      let url = `${process.env.BACKEND_URL}/uploads/product/${file.originalname}`;
      images.push({ image: url})
    })
  }
  req.body.images = images;

  if (!product) {
    return res.status(404).json({
      success: false,
      message: "Product not found",
    });
  }
  product = await Product.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
    runValidators: true,
  });

  res.status(200).json({
    success: true,
    product,
  });
};


step 2:
//backend/routes/product.js
router.route('/admin/product/:id').put(isAuthenticatedUser, authorizeRoles('admin'),upload.array('images'), updateProduct);



///FrontEnd Admin Product Update

//src/slice/productSlice.js
import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name: 'product',
    initialState:{
        loading: false,
        product:[],
        isProductCreated: false,
        isProductDeleted: false,
        isProductUpdated: false
    },
    reducers:{
        productRequest(state,action){
            return {
                loading: true
            }
        },
        productSuccess(state,action){
            return{
                loading: false,
                product: action.payload.product
            }
        },
        productFail(state,action){
            return{
                loading: false,
                error: action.payload
            }
        },
       newProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       newProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                product: action.payload.product,
                isProductCreated: true
            }
        },
        newProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
                isProductCreated: false
            }
        },
        clearProductCreated(state,action){
            return{
                ...state,
                isProductCreated: false
            }
        },
        deleteProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       deleteProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                isProductDeleted: true
            }
        },
        deleteProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
            }
        },
        clearProductDeleted(state,action){
            return{
                ...state,
                isProductDeleted: false
            }
        },
        updateProductRequest(state,action){
            return {
                ...state,
                loading: true
            }
        },
       updateProductSuccess(state,action){
            return{
                ...state,
                loading: false,
                product: action.payload.product,
                isProductUpdated: true
            }
        },
        updateProductFail(state,action){
            return{
                ...state,
                loading: false,
                error: action.payload,
                isProductUpdated: false
            }
        },
        clearProductUpdated(state,action){
            return{
                ...state,
                isProductUpdated: false
            }
        },
 
    }
})


const { actions,reducer}= productSlice;

export const {productRequest,
              productSuccess,
              productFail,
              newProductRequest,
              newProductSuccess,
              newProductFail,
              clearProductCreated,
              deleteProductFail,
              deleteProductRequest,
              deleteProductSuccess,
              clearProductDeleted,
              updateProductFail,
              updateProductRequest,
              updateProductSuccess,
              clearProductUpdated
            } = actions;

export default reducer;

step 2:

//src/actions/productActions.js
export const updateProduct = (id, productData) => async (dispatch) =>{

    try{
        dispatch(updateProductRequest())
       
        const {data} = await axios.put(`/api/v1/admin/product/${id}`,productData);
        dispatch(updateProductSuccess(data))
    }catch(error){
        //handle error
        dispatch(updateProductFail(error.response.data.message))
    }
}


step 3:

//components/admin/UpdateProduct.js
import { Fragment, useEffect, useState } from 'react'
import Sidebar from './Sidebar';
import { useDispatch, useSelector } from 'react-redux';
import {  useParams } from 'react-router-dom';
import { clearProductUpdated } from '../../slices/productSlice';
import { getProduct, updateProduct} from '../../actions/productActions';
import { toast } from 'react-toastify';
import { clearError } from '../../slices/productsSlice';





export default function UpdateProduct (){
  const [name, setName] = useState("");
  const [price,setPrice]= useState(""); 
  const [description,setDescription]= useState("");
  const [category, setCategory]=useState("");
  const [stock,setStock]=useState(0);
  const [seller,setSeller]=useState('');
  const [images,setImages]=useState([]);
  const [imagesCleared,setImagesCleared]= useState(false);
  const [imagesPreview,setImagesPreview] = useState([]);
  const {id:productId} = useParams();


  const {loading, isProductUpdated, error, product} = useSelector( state => state.productState)

  const categories = [
    'Electronics',
    'Mobile Phones',
    'Laptops',
    'Accessories',
    'Headphones',
    'Food',
    'Books',
    'Cloths/Shoes',
    'Beauty/Health',
    'Sports',
    'outdoor',
    'Home'
  ];

 
  const dispatch = useDispatch()

  const onImagesChange = (e) =>{
    const files = Array.from(e.target.files);

    files.forEach(file => {
      const reader = new FileReader();

      reader.onload = ()=>{
        if(reader.readyState == 2){
          setImagesPreview(oldArray => [...oldArray,reader.result])
          setImages(oldArray=>[...oldArray,file])
        }
      }
      reader.readAsDataURL(file)
    })
  }
  const submitHandler = (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('name',name);
    formData.append('price',price);
    formData.append('stock',stock);
    formData.append('description',description);
    formData.append('seller',seller);
    formData.append('category',category);
    images.forEach (image =>{
      formData.append('images',image)
    })
    formData.append('imagesCleared',imagesCleared);
dispatch(updateProduct(productId,formData))
  }

  const clearImagesHandler = () =>{
    setImages([]);
    setImagesPreview([]);
    setImagesCleared(true);
  }

 
 
  useEffect(()=>{
    if(isProductUpdated){
      toast('Product Updated Succesfully',{
        type:"success",
        position:"bottom-center",
        onOpen:()=> dispatch(clearProductUpdated())
      })
    
      return;
    }
    if(error){
      toast(error,{
        position:"bottom-center",
        type:'error',
        onOpen:()=>{dispatch(clearError())}
      })
      return
    }
    dispatch(getProduct(productId))
  },[isProductUpdated, error, dispatch])

  useEffect(()=>{
    if ( product && product._id) {
        setName(product.name);
        setPrice(product.price);
        setStock(product.stock);
        setDescription(product.description);
        setSeller(product.seller);
        setCategory(product.category);

        let images = [];
        product.images.forEach( image => {
            images.push(image.image)
        });
        setImagesPreview(images)
    }
  },[product])

    return (



        <div className="row">
        <div className="col-12 col-md-2">
             <Sidebar/>
        </div>
        <div className="col-12 col-md-10">
        <h1 className="my-4">Product List</h1>
        <Fragment>
        <div className="wrapper my-5"> 
        <form  onSubmit={submitHandler} className="shadow-lg" encType='multipart/form-data'>
            <h1 className="mb-4">Update Product</h1>

            <div className="form-group">
              <label htmlFor="name_field">Name</label>
              <input
                type="text"
                id="name_field"
                className="form-control"
                onChange={e => setName(e.target.value)}
                value={name}
              />
            </div>

            <div className="form-group">
                <label htmlFor="price_field">Price</label>
                <input
                  type="text"
                  id="price_field"
                  className="form-control"
                  onChange={e => setPrice(e.target.value)}
                  value={price}
                />
              </div>

              <div className="form-group">
                <label htmlFor="description_field">Description</label>
                <textarea
                     className="form-control" 
                     id="description_field" 
                     rows="8" 
                     onChange={e => setDescription(e.target.value)}
                     value={description}
                 ></textarea>
              </div>

              <div className="form-group">
                <label htmlFor="category_field">Category</label>
                <select value={category}  onChange={e=>setCategory(e.target.value)} className="form-control" id="category_field">
                    <option value=''>Select</option>
                    {categories.map( category => (
                     <option key={category} value={category}>{category}</option>
                    ))}
                    
                  </select>
              </div>
              <div className="form-group">
                <label htmlFor="stock_field">Stock</label>
                <input
                  type="number"
                  id="stock_field"
                  className="form-control"
                  onChange={e => setStock(e.target.value)}
                  value={stock}
                />
              </div>

              <div className="form-group">
                <label htmlFor="seller_field">Seller Name</label>
                <input
                  type="text"
                  id="seller_field"
                  className="form-control"
                  onChange={e => setSeller(e.target.value)}
                  value={seller}
                />
              </div>
              
              <div className='form-group'>
                <label>Images</label>
                
                    <div className='custom-file'>
                        <input
                            type='file'
                            name='product_images'
                            className='custom-file-input'
                            id='customFile'
                            multiple
                            onChange={onImagesChange}
                        />
                        <label className='custom-file-label' htmlFor='customFile'>
                            Choose Images
                        </label>
                    </div>
                    {imagesPreview.length > 0 && <span className='mr-2' style={{cursor:"pointer"}} onClick={clearImagesHandler}><i className='fa fa-trash'></i></span>}
                    {imagesPreview.map(image => (
                      <img 
                      className='mt-3 mr-2'
                      key={image}
                      src={image}
                      alt={`Image Preview`}
                      width="55"
                      height="52"
                      />
                    ))}
                    
            </div>

  
            <button
              id="login_button"
              type="submit"
              disabled={loading}
              className="btn btn-block py-3"
            >
              UPDATE
            </button>

          </form>
    </div> 
        </Fragment>
                        
                        
</div>


    </div>
       
    )
}

step 4:
//App.js

 <Route path="/admin/product/:id" element={<ProtectedRoute isAdmin={true}><UpdateProduct /></ProtectedRoute>} />






















































    




    




    




    















    

   

















































	























































































































































